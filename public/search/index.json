
{
    
    
    
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
    "pages": [{"date":"2023-02-10","image":"","imageAlt":"","link":"https://idev-blog.web.app/posts/%C6%B0%E1%BB%9Bc-m%C6%A1-c%E1%BB%A7a-m%E1%BA%B9/","summary":"Hello bạn, mình không biết bạn là ai, nhưng cảm ơn bạn vì đã ghé vào đây và nghe mình xàm xí. Bài viết này được viết lúc mình đang hơi tâm trạng, có thể làm ảnh hưởng đến bạn. Vậy nên bạn hãy cân nhắc tắt tivi hoặc chuyển kênh qua các kênh như #thơ hoặc các bài về tech nhé.","tags":["Tâm sự của NgocTD"],"text":"hello bạn, mình không biết bạn là ai, nhưng cảm ơn bạn vì đã ghé vào đây và nghe mình xàm xí. bài viết này được viết lúc mình đang hơi tâm trạng, có thể làm ảnh hưởng đến bạn. vậy nên bạn hãy cân nhắc tắt tivi hoặc chuyển kênh qua các kênh như #thơ hoặc các bài về tech nhé. cảm ơn nhiều nhiềuuu.\nà ừ, tuổi thơ của cậu thế nào nhỉ?\nmỗi khi mình nghe ai đó kể vể tuổi thơ thì mình sẽ luôn nhận ra là nó đẹp. mình cũng thế, mình lớn lên trong nghèo khó và nó cũng rất đẹp.\nà ừ, vài mảnh kí ức mà cậu còn nhớ?\nkhông biết cậu thế nào, chứ mình nhớ rất nhiều chuyện từ hồi mình bé xíu xíu và hầu hết nó đều liên quan đến mẹ \u0026hellip; còn nhớ cái hồi mình học lớp một, hồi đó nhà mình nghèo lắm. bố, mẹ mình làm đủ nghề đánh cá, trồng cà phê, thu mua đồng nát \u0026hellip; còn nhiều, nhiều lắm, mình cũng chả nhớ nổi nữa.\nmọi hôm thì mẹ sẽ chở mình đến trường, rồi sau đó sẽ đi thu mua đồng nát. nhưng hôm ấy, mẹ chở mình xong tiện thể sẽ đi làm luôn. đi đến gần trường, mẹ có hỏi mình rằng:\ncon có ngại với các bạn không? hồi đó mình cũng chả hiểu câu hỏi của mẹ đâu. mình trả lời là con không mẹ. nhưng mà lúc đó mẹ vẫn không đưa mình đến tận cổng, mẹ dừng ở xa xa một chút \u0026hellip;\nhồi đó, xung quanh nhà mình chả có ai cả, không làng, không xóm. bố mẹ thì đi làm suốt, chỉ có hai chị em chơi với nhau thôi. thân lắmmm. còn nhớ vào mỗi mùa khô, bố mẹ phải đi tưới cà phê ở rẫy phải vài ngày mới về. hai chị em ở nhà sợ lắm. nhà mình còn chả có đèn điện. tối đến hai chị em thắp nến lên, chắc hẳn ai cũng từng chỉ chỉ cái bóng khổng lồ xong chơi đùa với nó. còn mình và chị thì bảo nó là mẹ. mẹ dọa là tối thì không được mở cửa nhà, không thì trộm nó vào nhà đấy. thế mà chị mình đóng vai là mẹ, xong hai chị em cứ xưng hô mẹ, con với nhau. buồn cười lắm. à mình có viết một bài về cái vụ này, bạn có thể đọc ở đây nhé :3\nhồi cuối năm lớp 3, chị mình đòi về miền bắc (trước đó mình ở tây nguyên), bố mẹ mình cũng thấy trong đó điều kiện học hành không tốt, nên cho cả mình về. mình vui lắm. nhưng mình đâu có biết, là mình sẽ về sống với ông bà thôi, còn bố mẹ thì vẫn phải đi làm ở trong đó.\nmình nhớ có một lần mẹ về quê thăm con. trước tối hôm mẹ quay lại miền nam, mình bảo mẹ lúc nào mẹ dậy thì mẹ bảo con với nhé. mình còn cẩn thận lấy cái dây, buộc tay mình với mẹ lại, lúc đó mình sợ mẹ không gọi mình dậy. mình nhớ như in lúc 4h sáng hôm đấy, mình vẫn dậy được. lúc mẹ chuẩn bị đi, mình chạy đến ôm chân mẹ, khóc nức nở, không cho mẹ đi. mình cũng không nhớ mình nói gì với mẹ, chỉ nhớ mang máng là con không cho mẹ đi, mẹ ở nhà với con. mình khóc to, to lắm, to đến nỗi cả xóm sang khuyên mình cơ mà. bình thường mình mà khóc thì mẹ còn đánh thêm cho, nhưng hôm đấy dĩ nhiên là khác \u0026hellip;\nà ừ, mẹ khóc mẹ mình khóc nhiều lắm. bà ngoại có nói với mình là, trong cái nhà này không ai khổ bằng bà với mẹ (à mà mình có người bà tuyệt vời lắm, nếu có khúc mắc, chuyện buồn gì mà nói với bà là lúc sau sẽ được giải tỏa ngay. ước gì mình có thể nói chuyện giỏi như bà :3).\nhồi chị mình học năm 3, chị mình thấy không phù hợp nên đã bỏ học. đấy là lần đầu tiên mình thấy bố khóc. còn mẹ thì khóc cả ngày.\ncòn hôm nay mình cũng làm mẹ khóc. mẹ mình có ước mơ là mình học ths, mình đã nhận lời rồi, ấy thế mà hôm nay mình lại định bỏ. à mà không phải là mình không muốn học ths đâu, mà mình đang có một vài dự định khác, thôi thì cân tất vậy :3\nmình làm mẹ khóc nhiều lắm, nhưng mà thôi không dám kể :))\ncảm ơn bạn đã đọc đến tận lúc này, nếu được thì ib để mình mời cf nhé. cảm ơn nhiều nhiềuuu.\n","title":"Ước mơ của mẹ"},{"date":"2022-11-08","image":"","imageAlt":"","link":"https://idev-blog.web.app/posts/linux-auto-connect-openvpn/","summary":"The OpenVPN is an open source Virtual Private Network (VPN) project. It creates secure connections over the Internet using a custom security protocol that utilizes SSL/TLS.\nIn this article, i will introduce naive solution for automatic connect to VPN using openvpn and systemd management.","tags":["linux"],"text":"the openvpn is an open source virtual private network (vpn) project. it creates secure connections over the internet using a custom security protocol that utilizes ssl/tls.\nin this article, i will introduce naive solution for automatic connect to vpn using openvpn and systemd management.\ncreate vpn script\n# create script connect to vpn mkdir -p ~/scripts cd ~/scripts touch vpn.sh sudo chmod +x vpn.sh install oauthtool\nsudo apt install oathtool ~/scripts/vpn.sh\nvpn_user=\u0026#34;\u0026#34; # insert vpn user here vpn_password=\u0026#34;\u0026#34; # insert vpn password here otp_key=\u0026#34;\u0026#34; # insert otp key here ovpn_file=\u0026#34;\u0026#34; # insert path to .ovpn file here. example /home/admicro-bigdata.ovpn vpn_auth=\u0026#34;$(oathtool -b --totp $otp_key)$vpn_password\u0026#34; echo $vpn_password | sudo -s bash -c \u0026#34;openvpn --config $ovpn_file --auth-user-pass \u0026lt;(echo -e \u0026#39;$vpn_user\\n$vpn_auth\u0026#39;) --daemon\u0026#34; create systemd service\ncd /lib/systemd/system sudo touch vpn.service /lib/systemd/system/vpn.service\n[unit] description=auto connect vccorp\u0026#39;s vpn service. [service] type=forking user=root # path to vpn file, example: /home/ngoctd/scripts/vpn.sh execstart=/bin/bash /home/ngoctd/scripts/vpn.sh # path to vpn file, example: /home/ngoctd/scripts/vpn.sh execreload= /bin/bash /home/ngoctd/scripts/vpn.sh execstop=sudo killall openvpn restart=on-failure restartsec=10s [install] wantedby=multi-user.target start,stop,auto restart service\nsudo systemctl daemon-reload # reload systemd daemon sudo systemctl enable vpn # auto start when vpn was killed sudo systemctl start vpn # start vpn sudo systemctl status vpn # check vpn status sudo systemctl stop vpn # stop vpn ","title":"Automatic connect to VPN"},{"date":"2022-11-05","image":"","imageAlt":"","link":"https://idev-blog.web.app/posts/programming-language-channel-in-golang/","summary":"Channel is an important built-in feature in Go. It is one of the features makes Go unique. Channel makes concurrent programming convenient, fun and lowers the difficulties of concurrent programming. Channel mainly acts as a concurrency synchronization technique. To understand channels better, the internal structure of channels and some implementation details by the standard Go compiler/runtime are also simply described.","tags":["basic","golang"],"text":"channel is an important built-in feature in go. it is one of the features makes go unique. channel makes concurrent programming convenient, fun and lowers the difficulties of concurrent programming. channel mainly acts as a concurrency synchronization technique. to understand channels better, the internal structure of channels and some implementation details by the standard go compiler/runtime are also simply described.\nchannel introduction don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\ncommunicating by sharing memory and sharing by communicating are two programming manners in concurrent programming. when goroutines communicate by sharing memory, we use traditional concurrency sychronization techniques, such as mutex locks, to protect the shared memory to prevent data racts.\ngo also provides another concurrency sychronization technique, channel. channels make goroutines share memory by communicating. we can view a channel as an internal fifo queu within a program. some goroutines send values to the queue (the channel) and some other goroutines receive values from the queue.\nalong with transfering values (through channels), the ownership of some values may also be transferred between goroutines (ownership on logic view). when a goroutine send a value to a channel, we can view the goroutine releases the ownership of some values. when a goroutine receives a value from a channel, we can view the goroutine acquires the ownerships of some values.\nchannel value comparisons all channel types are comparable types. if one channel value is assigned to another, the two channels share the same underlying part(s). in other words, those two channels represent the same internal channel object. the result of comparing them is true.\ndetailed explanations for channel operations operation a nil channel a closed channel a not-closed non-nil channel close panic panic success send value to block for ever panic block or succeed to send receive value from block for ever never block block or success to receive to bettern understand channel types and values, and to make some explainations easier, looking in the raw internal structures of internal channel objects is very helpful.\nwe can think of each channel consistin of three queues internally:\nthe receiving goroutine queue (generally fifo). the queue is a linked list without size limitation. goroutines in this queue are all in blocking state and waiting to receive values from that channel.\nthe sending goroutine queue (generally fifo). the queue is also a linked list without size limitation. goroutines in this queue are all in blocking state and waiting to send values to that channel.\nthe value buffer queue (absolutely fifo). this is a circular queue. its size is equal to the capacity of the channel. if the current number of values stored in the value buffer queue of the channel reaches the capacity of the channel, the channel is called in full status. if no values are store in the value buffer queue of the channel currently, the channel is called in empty status. for a zero-capacity (unbuffered) channel is also in both full and empty status.\neach channel internally holds a mutex lock which is used to avoid data races in all kinds of operations\nchannel operation: try to receive when a goroutine r tries to receive a value from a not-closed non-nil channel, the goroutine r will acquire the lock associated with the channel firstly, the do the following steps until one condition is satisfied.\ncheck buffer, if the value buffer queue of the channel is not empty. the receiving goroutine queue of the channel must be empty ( buffer != empty =\u0026gt; receiveing queue == emtpy ). the goroutine r will receive (by unshifting) a value from the value buffer queue. if the sending goroutine queue of the channel is also not empty, a sending goroutine will be unshifted out of the sending goroutine queue and resumed to running state again. the value the just unshifted sending goroutine trying to send will be pushed into the value buffer queue of the channel. the receiving goroutine r continues running. for this scenario, the channel receive operation is called a non-blocking operation. the goroutine r will receive a value from the value buffer queue. the goroutine r will recceive a value from the value buffer queue. sending goroutine is not empty. goroutine s send value to buffer and enter running state again. -\u0026gt; the receiving goroutine r continues running. the channel receive operation is called a non-blocking operation\ncheck buffer, the value buffer of the channel is empty. if the sending goroutine queue of the channel is not empty, in which case the channel must be an unbuffered channel, the receiving goroutine r will unshift value from a send goroutine. the just unshifted sending goroutine will get unblocked and resumed to running state again. -\u0026gt; the receiving goroutine r continues running. the channel receive operation is called a non-blocking operation\nif value buffer queue and the sending goroutine queue of the channel are both emtpy, the goroutine r will be pushed into the receiving goroutine queue of the channel and enter (and stay in) blocking state. it may be resumed to running state when another goroutine sends a value to the channel later. -\u0026gt; the receiving goroutine r enter blocking state. the channel receive operation is called a blocking operation\nchannel operation: try to send when a goroutine s tries to send a value to a not-closed non-nil channel, the goroutine s will acquire the lock associated with the channel firstly, then do the following steps until one step condition is satisfied.\ncheck receiving goroutine queue. if the receiving goroutine queue of the channel is not empty, in which case the value buffer queue of the channel must be empty, the sending goroutine s will unshift a receiving goroutine from the receiving goroutine queue of the channel and send the value to the just unshifted receiving goroutine. the just unshifted receiving goroutine will get unblocked and resumed to running state again. -\u0026gt; the sending goroutine s continues running. the channel send operation is called a non-blocking operation\ncheck receiving goroutine queue (empty), check buffer queue ( not full ), in which case the sending goroutine queue must be also empty, the value the sending goroutine s trying to send will be pushed into the value buffer queue. -\u0026gt; the sending goroutine s continues running. the channel send operation is called a non-blocking operation\ncheck receiving goroutine queue (empty), check buffer queue ( full ), the sending goroutine s will be pushed into the sending goroutine queue of the channel and enter (and stay in) blocking state. it may be resumed to running state when another goroutine receives a value from the channel later. -\u0026gt; the sending goroutine s enter blocking. the channel send operation is called a blocking operation\nonce a non-nil channel is closed, sending a value to the channel will produce a runtime panic in the current goroutine. note sending data to a closed channel is viewed as a non-blocking operation.\nchannel operation: try to close when a goroutine tries to close a not-closed non-nil channel, once the goroutine has acquired the lock of the channel, both of the following two steps will be performed by the following order.\nif the receiving goroutine queue of the channel is not empty, in which case the value buffer of the channel must be empty, all the goroutines in the receiving goroutine queue of the channel will be unshifted one by one, each of themm will receive a zero value of the elemenet type of the channel and be resumed to running state. if the sending goroutine queue of the channel is not empty, all the goroutines in the sending goroutine queue of the channel will be unshifted one by one and each of them will produce a panic for sending on a closed channel. this is the reason why we should avoid concurrent send and close operations on the same channel. after a channel is closed, the values which have been already pushed into the value buffer of the channel are still there.\nafter a non-nil channel is closed, channel receive operations os the channel will never block\nsome facts about the internal queues of a channel if the channel is closed, both its sending and receiving goroutine queue must be empty, but its value buffer may not be empty. at any time, if the value buffer is not empty, then its receiving goroutine queue must be empty. at any time, if the value buffer is not full, then its sending goroutine queue must be empty. if the channel is buffered, then at time, at least one of the channel\u0026rsquo;s goroutine queues must be empty (sending, receiving or both). if the channel is unbuffered, most of the time one of its sending goroutine queue and the receiving goroutine queue must be empty, with one exception. the exception is that a goroutine may be pushed into both of the two queues when execution a select control flow code block. references channel use case go101\n","title":"Channel in Golang"},{"date":"2022-10-13","image":"","imageAlt":"","link":"https://idev-blog.web.app/posts/poem-hai-%C4%91%E1%BB%A9a-tr%E1%BA%BB/","summary":"Hai đứa trẻ lớn lên nơi rừng núi\nXung quanh nhà nào là cỏ, là cây\nHai đứa trẻ là chị là em, và là bạn\nBạn bè xung quanh, hiếm lắm ấy mà.\nHai đứa trẻ nhiều đêm khó ngủ","tags":["thơ"],"text":"hai đứa trẻ lớn lên nơi rừng núi\nxung quanh nhà nào là cỏ, là cây\nhai đứa trẻ là chị là em, và là bạn\nbạn bè xung quanh, hiếm lắm ấy mà.\nhai đứa trẻ nhiều đêm khó ngủ\nbố mẹ đi rẫy mãi chưa về\nhai đứa trẻ ngồi bên ngọn nến sáng\nchỉ bóng trên tường, gọi mẹ xưng con.\nhai đứa trẻ rời xa nơi nương náu\nbố mẹ lo chuyện học hành mai sau\nhai đứa trẻ là chị là em, không là bạn\nnhảy dây, bị mắt, thú vị hơn nhiều.\nhai đứa trẻ mai này rồi cũng lớn\nđứa rời xóm làng, đứa tìm thủ đô\nhai đứa trẻ hiếm nào khi hỏi chuyện\nchuyện học hành, chuyện tương lai, chuyện mai sau\nhai đứa trẻ, hai đứa trẻ ấy không còn\u0026hellip;\n","title":"Hai Đứa Trẻ"},{"date":"2022-03-11","image":"","imageAlt":"","link":"https://idev-blog.web.app/posts/poem-m%C6%B0a/","summary":"Mưa,\nMưa trên mái hiên nhà\nĐến tận cánh đồng xa\nMưa,\nMưa hoài, mưa xối xả\nKìa ai đang thả thuyền lá\nKí ức trôi\nTrôi mãi tận miền xa.","tags":["thơ"],"text":"mưa,\nmưa trên mái hiên nhà\nđến tận cánh đồng xa\nmưa,\nmưa hoài, mưa xối xả\nkìa ai đang thả thuyền lá\nkí ức trôi\ntrôi mãi tận miền xa.\n","title":"Mưa"},{"date":"2021-11-20","image":"","imageAlt":"","link":"https://idev-blog.web.app/posts/poem-l%E1%BB%ADa-h%E1%BB%93ng/","summary":"Có một đốm than nhỏ\nThắp lên ngọn lửa hồng\nDành trọn nhiệt huyết nồng\nTháp sáng ước mơ to.","tags":["thơ"],"text":"có một đốm than nhỏ\nthắp lên ngọn lửa hồng\ndành trọn nhiệt huyết nồng\ntháp sáng ước mơ to.\n","title":"Lửa Hồng"},{"date":"0001-01-01","image":"","imageAlt":"","link":"https://idev-blog.web.app/posts/golang-channel-usecase/","summary":"","tags":["channel","concurrency","golang"],"text":"","title":"Tổng hợp ví dụ về channel trong golang"}]
}

