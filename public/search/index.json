
{
    
    
    
    
        
        
        
    
        
        
        
    
        
        
        
    
    "pages": [{"date":"2022-11-02","image":"","imageAlt":"","link":"https://idev-blog.web.app/posts/trino-overview/","summary":"Since Trino is being called a database by many members of the community, it makes sense to begin with a definition of what Trino is not.","tags":["trino"],"text":"since trino is being called a database by many members of the community, it makes sense to begin with a definition of what trino is not. trino is not a general-purpose relation database. it is not a replacement for databases like mysql, postgresql or oracle.\nwhat trino is trino is a tool designed to efficiently query vast amount of data using distributed queries. trino was designed to handle data warehousing and analytics: data analysis, aggregating large amounts of data and producing reports.\n","title":"Trino Overview"},{"date":"2022-11-02","image":"","imageAlt":"","link":"https://idev-blog.web.app/posts/golang-all-in-one/","summary":"All about golang at basic level in one post.","tags":["basic","golang"],"text":"all about golang at basic level in one post. content in this post i have learned in go101 book and on the internet. at this time, i think it can be misconcept in golang.\nbasic types and basic value literals rune type (a.k.a int32 type), are special integer types. a rune value is intended to store a unicode point. a rune literal is expressed as one or more characters enclosed in a pair of quotes, for example \u0026lsquo;a\u0026rsquo; (the unicode value of character a is 97). we should know that some unicode characters are composed of more than one code points, for example \u0026lsquo;a\u0026rsquo;, \u0026lsquo;\\x61\u0026rsquo;, \u0026lsquo;\\141\u0026rsquo; are the same (the unicode value is 97).\nfunc main() { println(\u0026#39;a\u0026#39; == 97) println(\u0026#39;a\u0026#39; == \u0026#39;\\x61\u0026#39;) println(\u0026#39;a\u0026#39; == \u0026#39;\\141\u0026#39;) println(\u0026#39;a\u0026#39; == \u0026#39;\\u0061\u0026#39;) } ","title":"Golang All in One"},{"date":"2022-11-01","image":"","imageAlt":"","link":"https://idev-blog.web.app/posts/concurrency-pattern/","summary":"Concurrent pattern in golang","tags":["concurrency","golang","patterns"],"text":"concurrency pattern hello world\n","title":"Concurrency Pattern"}]
}

