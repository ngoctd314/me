
{
    
    
    
    
        
        
        
    
        
        
            
                
            
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
    "pages": [{"date":"2022-11-26","image":"","imageAlt":"","link":"https://idev-blog.web.app/posts/concurrency-pattern-pipeline-and-cancellation/","summary":"Go\u0026rsquo;s concurrency primitives make it easy to construct streaming data pipelines that make efficient use of I/O and multiple CPUs. This article introduces what is pipeline, how to to construct a pipeline and introduces techniques for dealing with failures cleanly.","tags":["concurrency pattern","golang"],"text":"go\u0026rsquo;s concurrency primitives make it easy to construct streaming data pipelines that make efficient use of i/o and multiple cpus. this article introduces what is pipeline, how to to construct a pipeline and introduces techniques for dealing with failures cleanly.\nwhat is a pipeline? a pipeline is a series of stages connected by channels, where each channel is a group of goroutines running the same function. in each stage, the goroutines\nreceive values from upstream via inbound channels perform some function on that data, usually producing new values send the values downstream via outbound channels each stage has any number of inbound and outbound channels, except the first and last stages, which have only outbound or inbound channels. the first stage is sometimes called the source and producer; the last stage, the sink or consumer.\nsquaring numbers consider a pipeline with three stages\nthe first stage, gen, is a function that converts a list of integers to a channel that emits the integers in the list.\n// the main function sets up the pipeline and runs the final stages // it receives values from the second stage and prints each one, until the channel is closed func main() { // a pipeline c := gen(2, 3) out := sq(c) fmt.println(\u0026lt;-out) fmt.println(\u0026lt;-out) } // the gen function starts a goroutine that sends the integers on the channel and closes the channel when all the values have been sent: func gen(nums ...int) \u0026lt;-chan int { out := make(chan int) go func() { for _, n := range nums { out \u0026lt;- n } close(out) }() return out } // the second stage, sq receives integers from a channel and returns a channel that emits the square of each received integer. // after the inbound channel is closed and this stage has sent all the values downstream, it closes the outbound channel func sq(in \u0026lt;-chan int) \u0026lt;-chan int { out := make(chan int) go func() { for n := range in { out \u0026lt;- n * n } close(out) }() return out } references\nhttps://go.dev/blog/pipelines ","title":"Pipelines and cancellation"},{"date":"2022-11-26","image":"/images/reactive/rx.png","imageAlt":"","link":"https://idev-blog.web.app/posts/asynchronize-reactive-programming-in-golang/","summary":"ReactiveX, or Rx for short, is an API for programming with Observable streams. ReactiveX is a new, alternative way of asynchronous programming to callbacks, promises, and deferred. It is about processing streams of events of items, with events being any occurrences or changes within the system.","tags":["go","reactive"],"text":"reactivex, or rx for short, is an api for programming with observable streams. reactivex is a new, alternative way of asynchronous programming to callbacks, promises, and deferred. it is about processing streams of events of items, with events being any occurrences or changes within the system. a stream of events is called an observable.\nrxgo hot vs. cold observables in the rx world, there is a distinction between cold and hot observables. when the data is produced by the observable itself, it is a cold observable. when the data is produced outside the observable, it is a hot observable. usually, we don\u0026rsquo;t want to create a producer over and over again, we favor a hot observable.\n// create a hot observable using fromchannel operator ch := make(chan rxgo.item) go func() { for i := 0; i \u0026lt; 3; i++ { ch \u0026lt;- rxgo.of(i) } close(ch) }() observable := rxgo.fromchannel(ch) // first observer for item := range observable.observe() { fmt.println(\u0026#34;first observer\u0026#34;, item.v) } // second observer for item := range observable.observe() { fmt.println(\u0026#34;second observer\u0026#34;, item.v) } // result // // 0 // 1 // 2 // it means the first observer already consumed all items. // create a cold observable using defer operator: observable := rxgo.defer([]rxgo.producer{func(_ context.context, ch chan\u0026lt;- rxgo.item) { for i := 0; i \u0026lt; 3; i++ { ch \u0026lt;- rxgo.of(i) } }}) // in the case of a cold observable, the stream was created independent for // every observer for item := range observable.observe() { fmt.println(\u0026#34;first observable: \u0026#34;, item.v) } // in the case of a cold observable, the stream was created independent for // every observer for item := range observable.observe() { fmt.println(\u0026#34;second observable: \u0026#34;, item.v) } // result // 0 // 1 // 2 // 0 // 1 // 2 hot vs cold observable are not about how you consume items, it\u0026rsquo;s about where data is produced. good example for hot observable are price ticks from a trading exchange. and if you teach an observable to fetch products from a database, then yield them one by one, you will create the cold observable.\n","title":"Reactive Programming with Go"},{"date":"2022-11-22","image":"","imageAlt":"","link":"https://idev-blog.web.app/posts/programming-language-channel-usecase/","summary":"This article will show many channel use cases\nAsynchronous and concurrency programing with Go channels is easy and enjoyable. The channel synchronization technique has wider range of uses and have more variables than the synchronization solutions used in some other languages, such as the actor model and the async/await pattern.","tags":["basic","golang"],"text":"this article will show many channel use cases\nasynchronous and concurrency programing with go channels is easy and enjoyable. the channel synchronization technique has wider range of uses and have more variables than the synchronization solutions used in some other languages, such as the actor model and the async/await pattern. use channels as futures/promises return receive-only channels as results\nfunc longtimerequest() \u0026lt;-chan struct{} { ch := make(chan struct{}) go func() { // simulate workload run 3s in using goroutine time.sleep(time.second * 3) ch \u0026lt;- struct{}{} }() // return immediately return ch } func main() { now := time.now() ch1 := longtimerequest() ch2 := longtimerequest() _, _ = \u0026lt;-ch1, \u0026lt;-ch2 // get result in future log.println(\u0026#34;exec in: \u0026#34;, time.since(now)) // ~ 3s } pass send-only channels as arguments\nfunc longtimerequest(ch chan\u0026lt;- struct{}) { // simulate workload run 3s in using goroutine ch \u0026lt;- struct{}{} log.println(\u0026#34;send value to channel\u0026#34;) } func main() { now := time.now() // buffer = 2 to avoid block to handle channle receive ch := make(chan struct{}, 2) go longtimerequest(ch) go longtimerequest(ch) \u0026lt;-ch \u0026lt;-ch log.println(\u0026#34;exec in: \u0026#34;, time.since(now)) } the first response win\nsometimes, a piece of data can be received from several sources to avoid high latencies. for a lot of factors, the response durations of these sources may vary much. to make the response duration as short as possible, we can send a request to every source in separated goroutine. only the first response use case will be used, other slower ones will be discarded.\nfunc source(c chan\u0026lt;- struct{}) { c \u0026lt;- struct{}{} } func main() { // c must be a buffered channel // if there are n sources, the capacity of the communication channel must be at least n-1 // to avoid the goroutines corresponding the discarded responses being blocked for ever c := make(chan struct{}, 5) for i := 0; i \u0026lt; cap(c); i++ { go source(c) } // first response win \u0026lt;-c } use channels for notifications notifications can be viewed as special requests/responses in which the responded values are not important. generally, we use the blank type struct{} as the element types of the notification channels.\n1-to-1 notification by sending a value to a channel\nif there are no values to be received from a channel, then the next receive operation on the channel will block until another goroutine sends a value to the channel. so we can send a value to a channel to notify another goroutine which is waiting to receive a value from the same channel.\nfunc blocking(c chan\u0026lt;- struct{}) { time.sleep(1 * time.second) // unlock by notifycation c \u0026lt;- struct{}{} } func main() { now := time.now() ch := make(chan struct{}) go blocking(ch) // blocking \u0026lt;-ch log.println(\u0026#34;since: \u0026#34;, time.since(now)) sig := make(chan os.signal) signal.notify(sig, os.interrupt) \u0026lt;-sig } 1-to-1 notification by receiving a value from a channel\nif the value buffer queue of a channel is full (the buffer queue of an unbuffered channel is always full), a send operation on the channel will block until another goroutine receives a value from the channel. so we can receive a value from a channel to notify another goroutine which is waiting to send a value to the same channel.\nfunc blocking(c \u0026lt;-chan struct{}) { time.sleep(1 * time.second) // unblock the second send in main goroutine \u0026lt;-c } func main() { now := time.now() ch := make(chan struct{}) go blocking(ch) // blocked here, wait for a notification ch \u0026lt;- struct{}{} log.println(\u0026#34;since: \u0026#34;, time.since(now)) sig := make(chan os.signal) signal.notify(sig, os.interrupt) \u0026lt;-sig } n-to-1 and 1-to-n notifications\nbroadcast (1-to-n) notifications by closing a channel\n","title":"Channel Use Case in Golang"},{"date":"2022-11-08","image":"","imageAlt":"","link":"https://idev-blog.web.app/posts/linux-auto-connect-openvpn/","summary":"The OpenVPN is an open source Virtual Private Network (VPN) project. It creates secure connections over the Internet using a custom security protocol that utilizes SSL/TLS.\nIn this article, i will introduce naive solution for automatic connect to VPN using openvpn and systemd management.","tags":["linux"],"text":"the openvpn is an open source virtual private network (vpn) project. it creates secure connections over the internet using a custom security protocol that utilizes ssl/tls.\nin this article, i will introduce naive solution for automatic connect to vpn using openvpn and systemd management.\ncreate vpn script\n# create script connect to vpn mkdir -p ~/scripts cd ~/scripts touch vpn.sh sudo chmod +x vpn.sh install oauthtool\nsudo apt install oathtool ~/scripts/vpn.sh\nvpn_user=\u0026#34;\u0026#34; # insert vpn user here vpn_password=\u0026#34;\u0026#34; # insert vpn password here otp_key=\u0026#34;\u0026#34; # insert otp key here ovpn_file=\u0026#34;\u0026#34; # insert path to .ovpn file here. example /home/admicro-bigdata.ovpn vpn_auth=\u0026#34;$(oathtool -b --totp $otp_key)$vpn_password\u0026#34; echo $vpn_password | sudo -s bash -c \u0026#34;openvpn --config $ovpn_file --auth-user-pass \u0026lt;(echo -e \u0026#39;$vpn_user\\n$vpn_auth\u0026#39;) --daemon\u0026#34; create systemd service\ncd /lib/systemd/system sudo touch vpn.service /lib/systemd/system/vpn.service\n[unit] description=auto connect vccorp\u0026#39;s vpn service. [service] type=forking user=root # path to vpn file, example: /home/ngoctd/scripts/vpn.sh execstart=/bin/bash /home/ngoctd/scripts/vpn.sh # path to vpn file, example: /home/ngoctd/scripts/vpn.sh execreload= /bin/bash /home/ngoctd/scripts/vpn.sh execstop=sudo killall openvpn restart=on-failure restartsec=10s [install] wantedby=multi-user.target start,stop,auto restart service\nsudo systemctl daemon-reload # reload systemd daemon sudo systemctl enable vpn # auto start when vpn was killed sudo systemctl start vpn # start vpn sudo systemctl status vpn # check vpn status sudo systemctl stop vpn # stop vpn ","title":"Automatic connect to VPN"},{"date":"2022-11-05","image":"","imageAlt":"","link":"https://idev-blog.web.app/posts/programming-language-channel-in-golang/","summary":"Channel is an important built-in feature in Go. It is one of the features makes Go unique. Channel makes concurrent programming convenient, fun and lowers the difficulties of concurrent programming. Channel mainly acts as a concurrency synchronization technique. To understand channels better, the internal structure of channels and some implementation details by the standard Go compiler/runtime are also simply described.","tags":["basic","golang"],"text":"channel is an important built-in feature in go. it is one of the features makes go unique. channel makes concurrent programming convenient, fun and lowers the difficulties of concurrent programming. channel mainly acts as a concurrency synchronization technique. to understand channels better, the internal structure of channels and some implementation details by the standard go compiler/runtime are also simply described.\nchannel introduction don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\ncommunicating by sharing memory and sharing by communicating are two programming manners in concurrent programming. when goroutines communicate by sharing memory, we use traditional concurrency sychronization techniques, such as mutex locks, to protect the shared memory to prevent data racts.\ngo also provides another concurrency sychronization technique, channel. channels make goroutines share memory by communicating. we can view a channel as an internal fifo queu within a program. some goroutines send values to the queue (the channel) and some other goroutines receive values from the queue.\nalong with transfering values (through channels), the ownership of some values may also be transferred between goroutines (ownership on logic view). when a goroutine send a value to a channel, we can view the goroutine releases the ownership of some values. when a goroutine receives a value from a channel, we can view the goroutine acquires the ownerships of some values.\nchannel value comparisons all channel types are comparable types. if one channel value is assigned to another, the two channels share the same underlying part(s). in other words, those two channels represent the same internal channel object. the result of comparing them is true.\ndetailed explanations for channel operations operation a nil channel a closed channel a not-closed non-nil channel close panic panic success send value to block for ever panic block or succeed to send receive value from block for ever never block block or success to receive to bettern understand channel types and values, and to make some explainations easier, looking in the raw internal structures of internal channel objects is very helpful.\nwe can think of each channel consistin of three queues internally:\nthe receiving goroutine queue (generally fifo). the queue is a linked list without size limitation. goroutines in this queue are all in blocking state and waiting to receive values from that channel.\nthe sending goroutine queue (generally fifo). the queue is also a linked list without size limitation. goroutines in this queue are all in blocking state and waiting to send values to that channel.\nthe value buffer queue (absolutely fifo). this is a circular queue. its size is equal to the capacity of the channel. if the current number of values stored in the value buffer queue of the channel reaches the capacity of the channel, the channel is called in full status. if no values are store in the value buffer queue of the channel currently, the channel is called in empty status. for a zero-capacity (unbuffered) channel is also in both full and empty status.\neach channel internally holds a mutex lock which is used to avoid data races in all kinds of operations\nchannel operation: try to receive when a goroutine r tries to receive a value from a not-closed non-nil channel, the goroutine r will acquire the lock associated with the channel firstly, the do the following steps until one condition is satisfied.\ncheck buffer, if the value buffer queue of the channel is not empty. the receiving goroutine queue of the channel must be empty ( buffer != empty =\u0026gt; receiveing queue == emtpy ). the goroutine r will receive (by unshifting) a value from the value buffer queue. if the sending goroutine queue of the channel is also not empty, a sending goroutine will be unshifted out of the sending goroutine queue and resumed to running state again. the value the just unshifted sending goroutine trying to send will be pushed into the value buffer queue of the channel. the receiving goroutine r continues running. for this scenario, the channel receive operation is called a non-blocking operation. the goroutine r will receive a value from the value buffer queue. the goroutine r will recceive a value from the value buffer queue. sending goroutine is not empty. goroutine s send value to buffer and enter running state again. -\u0026gt; the receiving goroutine r continues running. the channel receive operation is called a non-blocking operation\ncheck buffer, the value buffer of the channel is empty. if the sending goroutine queue of the channel is not empty, in which case the channel must be an unbuffered channel, the receiving goroutine r will unshift value from a send goroutine. the just unshifted sending goroutine will get unblocked and resumed to running state again. -\u0026gt; the receiving goroutine r continues running. the channel receive operation is called a non-blocking operation\nif value buffer queue and the sending goroutine queue of the channel are both emtpy, the goroutine r will be pushed into the receiving goroutine queue of the channel and enter (and stay in) blocking state. it may be resumed to running state when another goroutine sends a value to the channel later. -\u0026gt; the receiving goroutine r enter blocking state. the channel receive operation is called a blocking operation\nchannel operation: try to send when a goroutine s tries to send a value to a not-closed non-nil channel, the goroutine s will acquire the lock associated with the channel firstly, then do the following steps until one step condition is satisfied.\ncheck receiving goroutine queue. if the receiving goroutine queue of the channel is not empty, in which case the value buffer queue of the channel must be empty, the sending goroutine s will unshift a receiving goroutine from the receiving goroutine queue of the channel and send the value to the just unshifted receiving goroutine. the just unshifted receiving goroutine will get unblocked and resumed to running state again. -\u0026gt; the sending goroutine s continues running. the channel send operation is called a non-blocking operation\ncheck receiving goroutine queue (empty), check buffer queue ( not full ), in which case the sending goroutine queue must be also empty, the value the sending goroutine s trying to send will be pushed into the value buffer queue. -\u0026gt; the sending goroutine s continues running. the channel send operation is called a non-blocking operation\ncheck receiving goroutine queue (empty), check buffer queue ( full ), the sending goroutine s will be pushed into the sending goroutine queue of the channel and enter (and stay in) blocking state. it may be resumed to running state when another goroutine receives a value from the channel later. -\u0026gt; the sending goroutine s enter blocking. the channel send operation is called a blocking operation\nonce a non-nil channel is closed, sending a value to the channel will produce a runtime panic in the current goroutine. note sending data to a closed channel is viewed as a non-blocking operation.\nchannel operation: try to close when a goroutine tries to close a not-closed non-nil channel, once the goroutine has acquired the lock of the channel, both of the following two steps will be performed by the following order.\nif the receiving goroutine queue of the channel is not empty, in which case the value buffer of the channel must be empty, all the goroutines in the receiving goroutine queue of the channel will be unshifted one by one, each of themm will receive a zero value of the elemenet type of the channel and be resumed to running state. if the sending goroutine queue of the channel is not empty, all the goroutines in the sending goroutine queue of the channel will be unshifted one by one and each of them will produce a panic for sending on a closed channel. this is the reason why we should avoid concurrent send and close operations on the same channel. after a channel is closed, the values which have been already pushed into the value buffer of the channel are still there.\nafter a non-nil channel is closed, channel receive operations os the channel will never block\nsome facts about the internal queues of a channel if the channel is closed, both its sending and receiving goroutine queue must be empty, but its value buffer may not be empty. at any time, if the value buffer is not empty, then its receiving goroutine queue must be empty. at any time, if the value buffer is not full, then its sending goroutine queue must be empty. if the channel is buffered, then at time, at least one of the channel\u0026rsquo;s goroutine queues must be empty (sending, receiving or both). if the channel is unbuffered, most of the time one of its sending goroutine queue and the receiving goroutine queue must be empty, with one exception. the exception is that a goroutine may be pushed into both of the two queues when execution a select control flow code block. references channel use case go101\n","title":"Channel in Golang"},{"date":"2022-11-05","image":"","imageAlt":"","link":"https://idev-blog.web.app/posts/asynchronize-golang/","summary":"","tags":[],"text":"","title":"Fan out, Fan in"},{"date":"2022-11-05","image":"","imageAlt":"","link":"https://idev-blog.web.app/posts/concurrency-pattern-generator-future/","summary":"Generator Pattern allows the consumer of the data produced by the generator to run in parallel when the generator function is busy computing the next value.\nA Future indicates any data that is needed in future but its computation can be started in parallel so that it can be fetched from the background when needed.","tags":["concurrency pattern","golang"],"text":"generator pattern allows the consumer of the data produced by the generator to run in parallel when the generator function is busy computing the next value.\na future indicates any data that is needed in future but its computation can be started in parallel so that it can be fetched from the background when needed.\ngenerator generator pattern is used to generator a sequence of values which is used to produce some output. this allows the consumer of the data produced by the generator to run in parallel when the generator function is busy computing the text value.\nfunc fib(n int) chan int { c := make(chan int) go func() { // next state is depend on previous state for i, j := 0, 1; i \u0026lt; n; i, j = i+j, i { c \u0026lt;- i } close(c) }() return c } func consumer(c chan int) { for v := range c { fmt.println(v) } } the generator and the consumer can work concurrently (maybe in parallel) as the logic involved in both are different.\nfuture a future indicates any data that is needed in future but its computation can be started in parallel so that it can be fetched from the background when needed. mostly, futures are used to send asynchronous http request.\ntype data struct { body []byte error error } func futuredate(url string) \u0026lt;- chan data { c := make(chan data, 1) go func(){ resp, err := http.get(url) if err != nil { c \u0026lt;- data{ body: nil, error: err, } return } body, err := ioutil.readall(resp.body) resp.body.close() if err != nil { c \u0026lt;- data{ body: nil, error: err, } return } c \u0026lt;- data{ body: body, error: err, } }() return nil } the actual http request is done asynchronously in a goroutine. the main function can continue doing other things. when the result is needed, we read the result from the channel. if the request isn\u0026rsquo;t finished yet, the channel will block until the result is ready.\ndifferent between generator and future in generator pattern, we generate next state base on previous state (maybe not), but i purpose is compute many things in background. in future pattern, we use goroutine to execute an \u0026ldquo;heavy job\u0026rdquo; (only one job).\n","title":"Generator and Future Pattern"},{"date":"2022-10-13","image":"","imageAlt":"","link":"https://idev-blog.web.app/posts/poem-hai-%C4%91%E1%BB%A9a-tr%E1%BA%BB/","summary":"Hai đứa trẻ lớn lên nơi rừng núi\nXung quanh nhà nào là cỏ, là cây\nHai đứa trẻ là chị là em, và là bạn\nBạn bè xung quanh, hiếm lắm ấy mà.\nHai đứa trẻ nhiều đêm khó ngủ","tags":["thơ"],"text":"hai đứa trẻ lớn lên nơi rừng núi\nxung quanh nhà nào là cỏ, là cây\nhai đứa trẻ là chị là em, và là bạn\nbạn bè xung quanh, hiếm lắm ấy mà.\nhai đứa trẻ nhiều đêm khó ngủ\nbố mẹ đi rẫy mãi chưa về\nhai đứa trẻ ngồi bên ngọn nến sáng\nchỉ bóng trên tường, gọi mẹ xưng con.\nhai đứa trẻ rời xa nơi nương náu\nbố mẹ lo chuyện học hành mai sau\nhai đứa trẻ là chị là em, không là bạn\nnhảy dây, bị mắt, thú vị hơn nhiều.\nhai đứa trẻ mai này rồi cũng lớn\nđứa rời xóm làng, đứa tìm thủ đô\nhai đứa trẻ hiếm nào khi hỏi chuyện\nchuyện học hành, chuyện tương lai, chuyện mai sau\nhai đứa trẻ, hai đứa trẻ ấy không còn\u0026hellip;\n","title":"Hai Đứa Trẻ"},{"date":"2022-03-11","image":"","imageAlt":"","link":"https://idev-blog.web.app/posts/poem-m%C6%B0a/","summary":"Mưa,\nMưa trên mái hiên nhà\nĐến tận cánh đồng xa\nMưa,\nMưa hoài, mưa xối xả\nKìa ai đang thả thuyền lá\nKí ức trôi\nTrôi mãi tận miền xa.","tags":["thơ"],"text":"mưa,\nmưa trên mái hiên nhà\nđến tận cánh đồng xa\nmưa,\nmưa hoài, mưa xối xả\nkìa ai đang thả thuyền lá\nkí ức trôi\ntrôi mãi tận miền xa.\n","title":"Mưa"},{"date":"2021-11-20","image":"","imageAlt":"","link":"https://idev-blog.web.app/posts/poem-l%E1%BB%ADa-h%E1%BB%93ng/","summary":"Có một đốm than nhỏ\nThắp lên ngọn lửa hồng\nDành trọn nhiệt huyết nồng\nTháp sáng ước mơ to.","tags":["thơ"],"text":"có một đốm than nhỏ\nthắp lên ngọn lửa hồng\ndành trọn nhiệt huyết nồng\ntháp sáng ước mơ to.\n","title":"Lửa Hồng"},{"date":"0001-01-01","image":"","imageAlt":"","link":"https://idev-blog.web.app/posts/authentication-jwt/","summary":"Authentication Json Web Token In its compact form, JSON Web Tokens consist of three parts separated by dots (.) which are:\nHeader Payload Signature Header The header typically consists of two parts: the type of the token, which is JWT, and the signing algorithm being used, such as HMAC SHA256 or RSA","tags":[],"text":"authentication json web token in its compact form, json web tokens consist of three parts separated by dots (.) which are:\nheader payload signature header the header typically consists of two parts: the type of the token, which is jwt, and the signing algorithm being used, such as hmac sha256 or rsa\n{ \u0026#34;alg\u0026#34;: \u0026#34;hs256\u0026#34;, \u0026#34;typ\u0026#34;: \u0026#34;jwt\u0026#34; } then, this json is base64url encoded to form the first part of the jwt.\npayload\nthe second part of the token is the payload, which contains the claims. claims are statements about an entity (typically, the user) and additional data. there are three types of claims: registered, public, and private claims.\nregistered claims: there are a set of predefined claims which are not mandatory but recommended, to provide a set of useful iss(issuer), exp(expiration time), sub(subject), aud(audience) public claims: private claims: these are the custom claims created to share information between parties that agree on using them and are neither registered or public claims. { \u0026#34;sub\u0026#34;: \u0026#34;123456789\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;john\u0026#34;, \u0026#34;admin\u0026#34;: true } the payload is then base64url encoded to form the second part of the json web token.\nsignature\nto create the signature part you have to take the encoded header, the encoded payload, a secret, the algorithm specified in the header, and sign that. the signature is used to verify the message wasn\u0026rsquo;t changed along the way, and, in the case of tokens signed with a private key, it can also verify that the sender of the jwt is who it says it is.\nhow do json web tokens work?\nin authentication, when the user successfully logs in using their credentials, a json web token will be returned. since tokens are credentials,, greate care must be taken to prevent security issues. in general, you should not keep tokens longer than required.\nyou also should not store sensitive session data in browser storage due to lack of security.\nwhenever the user wants to access a protected route or resource, the user agent should send the jwt, typically in the authorization header using the bearer schema.\nthe content os the header should look like the following:\nauthorization: bearer \u0026lt;token\u0026gt; ","title":""}]
}

