<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>concurrency pattern on Dev&#39;s Log</title>
    <link>https://idev-blog.web.app/tags/concurrency-pattern/</link>
    <description>Recent content in concurrency pattern on Dev&#39;s Log</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Tran Duc Ngoc</copyright>
    <lastBuildDate>Sat, 26 Nov 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://idev-blog.web.app/tags/concurrency-pattern/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Pipelines and cancellation</title>
      <link>https://idev-blog.web.app/posts/concurrency-pattern-pipeline-and-cancellation/</link>
      <pubDate>Sat, 26 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://idev-blog.web.app/posts/concurrency-pattern-pipeline-and-cancellation/</guid>
      <description>Go&amp;rsquo;s concurrency primitives make it easy to construct streaming data pipelines that make efficient use of I/O and multiple CPUs. This article introduces what is pipeline, how to to construct a pipeline and introduces techniques for dealing with failures cleanly.</description>
    </item>
    
    <item>
      <title>Generator and Future Pattern</title>
      <link>https://idev-blog.web.app/posts/concurrency-pattern-generator-future/</link>
      <pubDate>Sat, 05 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://idev-blog.web.app/posts/concurrency-pattern-generator-future/</guid>
      <description>Generator Pattern allows the consumer of the data produced by the generator to run in parallel when the generator function is busy computing the next value.
A Future indicates any data that is needed in future but its computation can be started in parallel so that it can be fetched from the background when needed.</description>
    </item>
    
  </channel>
</rss>
