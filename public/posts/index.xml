<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Dev&#39;s Log</title>
    <link>https://idev-blog.web.app/posts/</link>
    <description>Recent content in Posts on Dev&#39;s Log</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Tran Duc Ngoc</copyright>
    <lastBuildDate>Sat, 26 Nov 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://idev-blog.web.app/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Pipelines and cancellation</title>
      <link>https://idev-blog.web.app/posts/concurrency-pattern-pipeline-and-cancellation/</link>
      <pubDate>Sat, 26 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://idev-blog.web.app/posts/concurrency-pattern-pipeline-and-cancellation/</guid>
      <description>Go&amp;rsquo;s concurrency primitives make it easy to construct streaming data pipelines that make efficient use of I/O and multiple CPUs. This article introduces what is pipeline, how to to construct a pipeline and introduces techniques for dealing with failures cleanly.</description>
    </item>
    
    <item>
      <title>Reactive Programming with Go</title>
      <link>https://idev-blog.web.app/posts/asynchronize-reactive-programming-in-golang/</link>
      <pubDate>Sat, 26 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://idev-blog.web.app/posts/asynchronize-reactive-programming-in-golang/</guid>
      <description>ReactiveX, or Rx for short, is an API for programming with Observable streams. ReactiveX is a new, alternative way of asynchronous programming to callbacks, promises, and deferred. It is about processing streams of events of items, with events being any occurrences or changes within the system.</description>
    </item>
    
    <item>
      <title>Channel Use Case in Golang</title>
      <link>https://idev-blog.web.app/posts/programming-language-channel-usecase/</link>
      <pubDate>Tue, 22 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://idev-blog.web.app/posts/programming-language-channel-usecase/</guid>
      <description>This article will show many channel use cases
Asynchronous and concurrency programing with Go channels is easy and enjoyable. The channel synchronization technique has wider range of uses and have more variables than the synchronization solutions used in some other languages, such as the actor model and the async/await pattern.</description>
    </item>
    
    <item>
      <title>Automatic connect to VPN</title>
      <link>https://idev-blog.web.app/posts/linux-auto-connect-openvpn/</link>
      <pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://idev-blog.web.app/posts/linux-auto-connect-openvpn/</guid>
      <description>The OpenVPN is an open source Virtual Private Network (VPN) project. It creates secure connections over the Internet using a custom security protocol that utilizes SSL/TLS.
In this article, i will introduce naive solution for automatic connect to VPN using openvpn and systemd management.</description>
    </item>
    
    <item>
      <title>Channel in Golang</title>
      <link>https://idev-blog.web.app/posts/programming-language-channel-in-golang/</link>
      <pubDate>Sat, 05 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://idev-blog.web.app/posts/programming-language-channel-in-golang/</guid>
      <description>Channel is an important built-in feature in Go. It is one of the features makes Go unique. Channel makes concurrent programming convenient, fun and lowers the difficulties of concurrent programming. Channel mainly acts as a concurrency synchronization technique. To understand channels better, the internal structure of channels and some implementation details by the standard Go compiler/runtime are also simply described.</description>
    </item>
    
    <item>
      <title>Fan out, Fan in</title>
      <link>https://idev-blog.web.app/posts/asynchronize-golang/</link>
      <pubDate>Sat, 05 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://idev-blog.web.app/posts/asynchronize-golang/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Generator and Future Pattern</title>
      <link>https://idev-blog.web.app/posts/concurrency-pattern-generator-future/</link>
      <pubDate>Sat, 05 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://idev-blog.web.app/posts/concurrency-pattern-generator-future/</guid>
      <description>Generator Pattern allows the consumer of the data produced by the generator to run in parallel when the generator function is busy computing the next value.
A Future indicates any data that is needed in future but its computation can be started in parallel so that it can be fetched from the background when needed.</description>
    </item>
    
    <item>
      <title>Hai Đứa Trẻ</title>
      <link>https://idev-blog.web.app/posts/poem-hai-%C4%91%E1%BB%A9a-tr%E1%BA%BB/</link>
      <pubDate>Thu, 13 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://idev-blog.web.app/posts/poem-hai-%C4%91%E1%BB%A9a-tr%E1%BA%BB/</guid>
      <description>Hai đứa trẻ lớn lên nơi rừng núi
Xung quanh nhà nào là cỏ, là cây
Hai đứa trẻ là chị là em, và là bạn
Bạn bè xung quanh, hiếm lắm ấy mà.
Hai đứa trẻ nhiều đêm khó ngủ</description>
    </item>
    
    <item>
      <title>Mưa</title>
      <link>https://idev-blog.web.app/posts/poem-m%C6%B0a/</link>
      <pubDate>Fri, 11 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://idev-blog.web.app/posts/poem-m%C6%B0a/</guid>
      <description>Mưa,
Mưa trên mái hiên nhà
Đến tận cánh đồng xa
Mưa,
Mưa hoài, mưa xối xả
Kìa ai đang thả thuyền lá
Kí ức trôi
Trôi mãi tận miền xa.</description>
    </item>
    
    <item>
      <title>Lửa Hồng</title>
      <link>https://idev-blog.web.app/posts/poem-l%E1%BB%ADa-h%E1%BB%93ng/</link>
      <pubDate>Sat, 20 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://idev-blog.web.app/posts/poem-l%E1%BB%ADa-h%E1%BB%93ng/</guid>
      <description>Có một đốm than nhỏ
Thắp lên ngọn lửa hồng
Dành trọn nhiệt huyết nồng
Tháp sáng ước mơ to.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://idev-blog.web.app/posts/authentication-jwt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://idev-blog.web.app/posts/authentication-jwt/</guid>
      <description>Authentication Json Web Token In its compact form, JSON Web Tokens consist of three parts separated by dots (.) which are:
Header Payload Signature Header The header typically consists of two parts: the type of the token, which is JWT, and the signing algorithm being used, such as HMAC SHA256 or RSA</description>
    </item>
    
  </channel>
</rss>
