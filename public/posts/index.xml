<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Dev&#39;s Log</title>
    <link>https://idev-blog.web.app/posts/</link>
    <description>Recent content in Posts on Dev&#39;s Log</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Tran Duc Ngoc</copyright>
    <lastBuildDate>Fri, 10 Feb 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://idev-blog.web.app/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Ước mơ của mẹ</title>
      <link>https://idev-blog.web.app/posts/%C6%B0%E1%BB%9Bc-m%C6%A1-c%E1%BB%A7a-m%E1%BA%B9/</link>
      <pubDate>Fri, 10 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://idev-blog.web.app/posts/%C6%B0%E1%BB%9Bc-m%C6%A1-c%E1%BB%A7a-m%E1%BA%B9/</guid>
      <description>Hello bạn, mình không biết bạn là ai, nhưng cảm ơn bạn vì đã ghé vào đây và nghe mình xàm xí. Bài viết này được viết lúc mình đang hơi tâm trạng, có thể làm ảnh hưởng đến bạn. Vậy nên bạn hãy cân nhắc tắt tivi hoặc chuyển kênh qua các kênh như #thơ hoặc các bài về tech nhé.</description>
    </item>
    
    <item>
      <title>Channel Use Case in Golang</title>
      <link>https://idev-blog.web.app/posts/programming-language-channel-usecase/</link>
      <pubDate>Tue, 27 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://idev-blog.web.app/posts/programming-language-channel-usecase/</guid>
      <description>This article will show many channel use cases
Asynchronous and concurrency programing with Go channels is easy and enjoyable. The channel synchronization technique has wider range of uses and have more variables than the synchronization solutions used in some other languages, such as the actor model and the async/await pattern.</description>
    </item>
    
    <item>
      <title>wire for D. D for Dependency Injection</title>
      <link>https://idev-blog.web.app/posts/programming-language-wire-for-d/</link>
      <pubDate>Mon, 12 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://idev-blog.web.app/posts/programming-language-wire-for-d/</guid>
      <description>Wire has two core concepts: providers and injectors.
Providers The primary mechanism in Wire is the providers: a function that can produce a value.
type Foo struct { X int } func ProvideFoo() Foo { return Foo{X: 42} } Providers can also return errors</description>
    </item>
    
    <item>
      <title>Pipelines and cancellation</title>
      <link>https://idev-blog.web.app/posts/concurrency-pattern-pipeline-and-cancellation/</link>
      <pubDate>Sat, 26 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://idev-blog.web.app/posts/concurrency-pattern-pipeline-and-cancellation/</guid>
      <description>Go&amp;rsquo;s concurrency primitives make it easy to construct streaming data pipelines that make efficient use of I/O and multiple CPUs. This article introduces what is pipeline, how to to construct a pipeline and introduces techniques for dealing with failures cleanly.</description>
    </item>
    
    <item>
      <title>Reactive Programming with Go</title>
      <link>https://idev-blog.web.app/posts/asynchronize-reactive-programming-in-golang/</link>
      <pubDate>Sat, 26 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://idev-blog.web.app/posts/asynchronize-reactive-programming-in-golang/</guid>
      <description>ReactiveX, or Rx for short, is an API for programming with Observable streams. ReactiveX is a new, alternative way of asynchronous programming to callbacks, promises, and deferred. It is about processing streams of events of items, with events being any occurrences or changes within the system.</description>
    </item>
    
    <item>
      <title>Reactive Programming, VertX</title>
      <link>https://idev-blog.web.app/posts/tech-talk-reactive-programming-vertx/</link>
      <pubDate>Sat, 26 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://idev-blog.web.app/posts/tech-talk-reactive-programming-vertx/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Content Delivery Network</title>
      <link>https://idev-blog.web.app/posts/net-work-cdn/</link>
      <pubDate>Fri, 25 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://idev-blog.web.app/posts/net-work-cdn/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Hive metastore service </title>
      <link>https://idev-blog.web.app/posts/bigdata-hms/</link>
      <pubDate>Tue, 15 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://idev-blog.web.app/posts/bigdata-hms/</guid>
      <description>We can simplify the Hive architecture to four components:
The runtime contains the logic of the query engine that translates the SQL - esque Hive Query Language (HQL) into MapReduce jobs that run over files stored in the filesystem.
Storage component is simply that, it stores file in various formats and index structures to recall these files (JSON, CSV, ORC, Parquet, HDFS, Aws S3, GCS)</description>
    </item>
    
    <item>
      <title>Distributed tracing, open telemetry</title>
      <link>https://idev-blog.web.app/posts/monitor-distributed-tracing-opentelemetry/</link>
      <pubDate>Thu, 10 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://idev-blog.web.app/posts/monitor-distributed-tracing-opentelemetry/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Automatic connect to VPN</title>
      <link>https://idev-blog.web.app/posts/linux-auto-connect-openvpn/</link>
      <pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://idev-blog.web.app/posts/linux-auto-connect-openvpn/</guid>
      <description>The OpenVPN is an open source Virtual Private Network (VPN) project. It creates secure connections over the Internet using a custom security protocol that utilizes SSL/TLS.
In this article, i will introduce naive solution for automatic connect to VPN using openvpn and systemd management.</description>
    </item>
    
    <item>
      <title>Cancel context with timeout in golang</title>
      <link>https://idev-blog.web.app/posts/programming-language-graceful-cancel-context-with-timeout-in-golang/</link>
      <pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://idev-blog.web.app/posts/programming-language-graceful-cancel-context-with-timeout-in-golang/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Concurrency is not parallelism</title>
      <link>https://idev-blog.web.app/posts/tech-talk-concurrent-is-not-parallelism/</link>
      <pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://idev-blog.web.app/posts/tech-talk-concurrent-is-not-parallelism/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Observer Pattern</title>
      <link>https://idev-blog.web.app/posts/microservices-protocol-buffers/</link>
      <pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://idev-blog.web.app/posts/microservices-protocol-buffers/</guid>
      <description></description>
    </item>
    
    <item>
      <title>GRPC Overview</title>
      <link>https://idev-blog.web.app/posts/overview-grpc/</link>
      <pubDate>Mon, 07 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://idev-blog.web.app/posts/overview-grpc/</guid>
      <description>gRPC is a modern, open source remote procedure call (RPC) framework that can run anywhere. It enables client and server applications to communicate transparently, and makes it easier to build connected systems.
In gRPC, a client application can directly call a method on a server application on a different machine as if it were a local object, making it easier for you to create disitributed applications can services.</description>
    </item>
    
    <item>
      <title>Protocol Buffers Overview</title>
      <link>https://idev-blog.web.app/posts/overview-protocol-buffer/</link>
      <pubDate>Mon, 07 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://idev-blog.web.app/posts/overview-protocol-buffer/</guid>
      <description>Protocol buffers provide a language-neutral, platform-neutral, extensible mechanism for serializing structured data in a forward-compatible and backward-compatible way. It&amp;rsquo;s like JSON, except it&amp;rsquo;s smaller and faster, and it generates native language bindings.
Protocol buffers are a combination of the definition language (created in .</description>
    </item>
    
    <item>
      <title>Channel in Golang</title>
      <link>https://idev-blog.web.app/posts/programming-language-channel-in-golang/</link>
      <pubDate>Sat, 05 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://idev-blog.web.app/posts/programming-language-channel-in-golang/</guid>
      <description>Channel is an important built-in feature in Go. It is one of the features makes Go unique. Channel makes concurrent programming convenient, fun and lowers the difficulties of concurrent programming. Channel mainly acts as a concurrency synchronization technique. To understand channels better, the internal structure of channels and some implementation details by the standard Go compiler/runtime are also simply described.</description>
    </item>
    
    <item>
      <title>Fan out, Fan in</title>
      <link>https://idev-blog.web.app/posts/concurrency-pattern-fan-in-fan-out/</link>
      <pubDate>Sat, 05 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://idev-blog.web.app/posts/concurrency-pattern-fan-in-fan-out/</guid>
      <description>Fan-in Fan-out is a way of Multiplexing and De-Multiplexing in golang. Fan-in refers to processing multiple input data and combining into a single entity. Fan-out is the exact opposite, dividing the data into multiple smaller chunks,
You&amp;rsquo;ve got a pipeline set up.</description>
    </item>
    
    <item>
      <title>Generator and Future Pattern</title>
      <link>https://idev-blog.web.app/posts/concurrency-pattern-generator-future/</link>
      <pubDate>Sat, 05 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://idev-blog.web.app/posts/concurrency-pattern-generator-future/</guid>
      <description>Generator Pattern allows the consumer of the data produced by the generator to run in parallel when the generator function is busy computing the next value.
A Future indicates any data that is needed in future but its computation can be started in parallel so that it can be fetched from the background when needed.</description>
    </item>
    
    <item>
      <title>Golang Memory Order</title>
      <link>https://idev-blog.web.app/posts/programming-language-go-memory-order/</link>
      <pubDate>Sat, 05 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://idev-blog.web.app/posts/programming-language-go-memory-order/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Decorator pattern</title>
      <link>https://idev-blog.web.app/posts/design-pattern-decorator/</link>
      <pubDate>Fri, 04 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://idev-blog.web.app/posts/design-pattern-decorator/</guid>
      <description>I used to think real men subclassed everything. That was until I learned the power of extension at runtime, rather than at compile time.
Just call this chapter &amp;ldquo;Design Eye for Inheritance Guy.&amp;rdquo; We&amp;rsquo;ll re-examine the typical overuse of inheritance and you&amp;rsquo;ll learn how to decorate your classes at runtime using a form of object composition.</description>
    </item>
    
    <item>
      <title>Trino Overview</title>
      <link>https://idev-blog.web.app/posts/overview-trino/</link>
      <pubDate>Fri, 04 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://idev-blog.web.app/posts/overview-trino/</guid>
      <description>Trino is a distributed SQL query engine designed to query large data sets distributed over one or more heterogeneous data sources.
Since Trino is being called a database by many members of the community, it makes sense to begin with a definition of what Trino is not.</description>
    </item>
    
    <item>
      <title>Observer Pattern</title>
      <link>https://idev-blog.web.app/posts/design-pattern-observer/</link>
      <pubDate>Thu, 03 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://idev-blog.web.app/posts/design-pattern-observer/</guid>
      <description>Keeping your Objects in the Know, you don&amp;rsquo;t want to miss out when something interesting happens.
The Observer Pattern defines a one-to-many dependency between objects so that when one object changes state, all of its dependents are notified and updated automatically.</description>
    </item>
    
    <item>
      <title>Hai Đứa Trẻ</title>
      <link>https://idev-blog.web.app/posts/poem-hai-%C4%91%E1%BB%A9a-tr%E1%BA%BB/</link>
      <pubDate>Thu, 13 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://idev-blog.web.app/posts/poem-hai-%C4%91%E1%BB%A9a-tr%E1%BA%BB/</guid>
      <description>Hai đứa trẻ lớn lên nơi rừng núi
Xung quanh nhà nào là cỏ, là cây
Hai đứa trẻ là chị là em, và là bạn
Bạn bè xung quanh, hiếm lắm ấy mà.
Hai đứa trẻ nhiều đêm khó ngủ</description>
    </item>
    
    <item>
      <title>Golang All in One</title>
      <link>https://idev-blog.web.app/posts/programming-language-golang-mistake/</link>
      <pubDate>Sun, 02 Oct 2022 07:33:22 +0700</pubDate>
      
      <guid>https://idev-blog.web.app/posts/programming-language-golang-mistake/</guid>
      <description>All about golang at basic level in one post. Content in this post i have learned in go101 book and on the internet. At this time, i think it can be misconcept in golang.
Basic Types and Basic Value Literals rune type (a.</description>
    </item>
    
    <item>
      <title>Mưa</title>
      <link>https://idev-blog.web.app/posts/poem-m%C6%B0a/</link>
      <pubDate>Fri, 11 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://idev-blog.web.app/posts/poem-m%C6%B0a/</guid>
      <description>Mưa,
Mưa trên mái hiên nhà
Đến tận cánh đồng xa
Mưa,
Mưa hoài, mưa xối xả
Kìa ai đang thả thuyền lá
Kí ức trôi
Trôi mãi tận miền xa.</description>
    </item>
    
    <item>
      <title>Lửa Hồng</title>
      <link>https://idev-blog.web.app/posts/poem-l%E1%BB%ADa-h%E1%BB%93ng/</link>
      <pubDate>Sat, 20 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://idev-blog.web.app/posts/poem-l%E1%BB%ADa-h%E1%BB%93ng/</guid>
      <description>Có một đốm than nhỏ
Thắp lên ngọn lửa hồng
Dành trọn nhiệt huyết nồng
Tháp sáng ước mơ to.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://idev-blog.web.app/posts/authentication-jwt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://idev-blog.web.app/posts/authentication-jwt/</guid>
      <description>Authentication Json Web Token In its compact form, JSON Web Tokens consist of three parts separated by dots (.) which are:
Header Payload Signature Header The header typically consists of two parts: the type of the token, which is JWT, and the signing algorithm being used, such as HMAC SHA256 or RSA</description>
    </item>
    
    <item>
      <title></title>
      <link>https://idev-blog.web.app/posts/protobuf-backward-and-forward-compatibility/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://idev-blog.web.app/posts/protobuf-backward-and-forward-compatibility/</guid>
      <description>What exactly are protocol buffers? Protocol Buffers provide a language-neutral, platform-neutral, extensible mechanism for serializing structured data in a forward-compatible and backward-compatible way. It&amp;rsquo;s like JSON, except it&amp;rsquo;s smaller and faster, and it generates native language bindings.
Some of the advantages of using protocol buffers include: Compact data storage Fast parsing Availability in many programming languages Optimized functionality through automatically-generated classes Understanding Backward and Forward Compatibility There are at least two parts to any protobuf system, the sender and the receiver.</description>
    </item>
    
  </channel>
</rss>
