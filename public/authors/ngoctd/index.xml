<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ngoctd on Dev&#39;s Log</title>
    <link>https://idev-blog.web.app/authors/ngoctd/</link>
    <description>Recent content in ngoctd on Dev&#39;s Log</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Tran Duc Ngoc</copyright>
    <lastBuildDate>Tue, 08 Nov 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://idev-blog.web.app/authors/ngoctd/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Automatic connect to VPN</title>
      <link>https://idev-blog.web.app/posts/linux-auto-connect-openvpn/</link>
      <pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://idev-blog.web.app/posts/linux-auto-connect-openvpn/</guid>
      <description>The OpenVPN is an open source Virtual Private Network (VPN) project. It creates secure connections over the Internet using a custom security protocol that utilizes SSL/TLS.
In this article, i will introduce naive solution for automatic connect to VPN using openvpn and systemd management.</description>
    </item>
    
    <item>
      <title>Channel in Golang</title>
      <link>https://idev-blog.web.app/posts/programming-language-channel-in-golang/</link>
      <pubDate>Sat, 05 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://idev-blog.web.app/posts/programming-language-channel-in-golang/</guid>
      <description>Channel is an important built-in feature in Go. It is one of the features makes Go unique. Channel makes concurrent programming convenient, fun and lowers the difficulties of concurrent programming. Channel mainly acts as a concurrency synchronization technique. To understand channels better, the internal structure of channels and some implementation details by the standard Go compiler/runtime are also simply described.</description>
    </item>
    
    <item>
      <title>Fan out, Fan in</title>
      <link>https://idev-blog.web.app/posts/concurrency-pattern-fan-in-fan-out/</link>
      <pubDate>Sat, 05 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://idev-blog.web.app/posts/concurrency-pattern-fan-in-fan-out/</guid>
      <description>Fan-in Fan-out is a way of Multiplexing and De-Multiplexing in golang. Fan-in refers to processing multiple input data and combining into a single entity. Fan-out is the exact opposite, dividing the data into multiple smaller chunks,
You&amp;rsquo;ve got a pipeline set up.</description>
    </item>
    
    <item>
      <title>Generator and Future Pattern</title>
      <link>https://idev-blog.web.app/posts/concurrency-pattern-generator-future/</link>
      <pubDate>Sat, 05 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://idev-blog.web.app/posts/concurrency-pattern-generator-future/</guid>
      <description>Generator Pattern allows the consumer of the data produced by the generator to run in parallel when the generator function is busy computing the next value.
A Future indicates any data that is needed in future but its computation can be started in parallel so that it can be fetched from the background when needed.</description>
    </item>
    
  </channel>
</rss>
