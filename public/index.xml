<?xml version="1.0" encoding="utf-8" standalone="yes"?><?xml-stylesheet href="/feed_style.xsl" type="text/xsl"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="https://www.rssboard.org/media-rss">
  <channel>
    <title>Dev&#39;s Log</title>
    <link>https://idev-blog.web.app/</link>
    <description>Recent content on Dev&#39;s Log</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Tran Duc Ngoc</copyright>
    <lastBuildDate>Fri, 03 Mar 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://idev-blog.web.app/index.xml" rel="self" type="application/rss+xml" /><icon>https://idev-blog.web.app/logo.png</icon>
    
    
    <item>
      <title>Một vài cách sử dụng channel trong golang</title>
      <link>https://idev-blog.web.app/posts/golang-channel-usecase/</link>
      <pubDate>Fri, 03 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://idev-blog.web.app/posts/golang-channel-usecase/</guid>
      <description><![CDATA[<p>Lập trình bất đồng bộ (asynchronous) và đồng thời (concurrency) trở  lên dễ dàng với channel trong Golang. Synchronization với channel có phạm vi sử dụng lớn và nhiều biến thể hơn so với các mô hình khác như actoc model hay async/await pattern.</p>
<p>Trong bài này mình sẽ tổng hợp lại các trường hợp sử dụng channel trong golang, mục đích chính là sử dụng nhiều nhất có thể (chứ không phải là trường hợp tốt nhất) có thể các kĩ thuật khác về synchronization sẽ tốt hơn.</p>
<h2 id="sử-dụng-channel-như-futurespromises">Sử dụng channel như Futures/Promises</h2>
<p>Future và promises được sử dụng trong nhiều ngôn ngữ khác nhau. Chúng thường được sử dụng dưới dạng requests và responses.</p>
<p><strong>Lười làm thì thuê - Return receive-only channel</strong></p>
<p>Trong ví dụ dưới longTimeRequest xử lý async bằng cách trả về receive-only channel. Mỗi hàm longTimeRequest thực hiện hết 1s (sleep). Bằng cách đưa phần sleep (minh họa cho workload nào đó) chạy dưới goroutine và trả về ngay receive-only channel thì giúp x2 thời gian thực hiện.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">func</span> <span style="color:#50fa7b">main</span>() {
</span></span><span style="display:flex;"><span>	now <span style="color:#ff79c6">:=</span> time.<span style="color:#50fa7b">Now</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#6272a4">// do async
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>	r1, r2 <span style="color:#ff79c6">:=</span> <span style="color:#50fa7b">longTimeRequest</span>(), <span style="color:#50fa7b">longTimeRequest</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#50fa7b">getResponse</span>(r1)
</span></span><span style="display:flex;"><span>	<span style="color:#50fa7b">getResponse</span>(r2)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	log.<span style="color:#50fa7b">Println</span>(<span style="color:#f1fa8c">&#34;since: &#34;</span>, time.<span style="color:#50fa7b">Since</span>(now))
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">func</span> <span style="color:#50fa7b">longTimeRequest</span>() <span style="color:#ff79c6">&lt;-</span><span style="color:#8be9fd;font-style:italic">chan</span> <span style="color:#8be9fd">string</span> {
</span></span><span style="display:flex;"><span>	ch <span style="color:#ff79c6">:=</span> <span style="color:#8be9fd;font-style:italic">make</span>(<span style="color:#8be9fd;font-style:italic">chan</span> <span style="color:#8be9fd">string</span>)
</span></span><span style="display:flex;"><span>	now <span style="color:#ff79c6">:=</span> time.<span style="color:#50fa7b">Now</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#6272a4">// async here
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>	<span style="color:#ff79c6">go</span> <span style="color:#8be9fd;font-style:italic">func</span>() {
</span></span><span style="display:flex;"><span>		time.<span style="color:#50fa7b">Sleep</span>(time.Second)
</span></span><span style="display:flex;"><span>		ch <span style="color:#ff79c6">&lt;-</span> fmt.<span style="color:#50fa7b">Sprintf</span>(<span style="color:#f1fa8c">&#34;long time request response after: %v&#34;</span>, time.<span style="color:#50fa7b">Since</span>(now))
</span></span><span style="display:flex;"><span>        <span style="color:#8be9fd;font-style:italic">close</span>(ch)
</span></span><span style="display:flex;"><span>	}()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff79c6">return</span> ch
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">func</span> <span style="color:#50fa7b">getResponse</span>(ch <span style="color:#ff79c6">&lt;-</span><span style="color:#8be9fd;font-style:italic">chan</span> <span style="color:#8be9fd">string</span>) {
</span></span><span style="display:flex;"><span>	log.<span style="color:#50fa7b">Println</span>(<span style="color:#ff79c6">&lt;-</span>ch)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><strong>Lười làm thì thuê - Pass send-only channels</strong></p>
<p>Thay vì trả về receive-only channel, ta có thể sử dụng send-only channels như là một phương pháp thay thế. Tuy nhiên mình thấy cách receive-only channel sử dụng clean hơn.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">func</span> <span style="color:#50fa7b">main</span>() {
</span></span><span style="display:flex;"><span>	now <span style="color:#ff79c6">:=</span> time.<span style="color:#50fa7b">Now</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#6272a4">// sử dụng buffered channel để tránh block khi gửi
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>	ch <span style="color:#ff79c6">:=</span> <span style="color:#8be9fd;font-style:italic">make</span>(<span style="color:#8be9fd;font-style:italic">chan</span> <span style="color:#8be9fd">string</span>, <span style="color:#bd93f9">2</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#ff79c6">go</span> <span style="color:#50fa7b">longTimeRequest</span>(ch)
</span></span><span style="display:flex;"><span>	<span style="color:#ff79c6">go</span> <span style="color:#50fa7b">longTimeRequest</span>(ch)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#50fa7b">getResponse</span>(ch)
</span></span><span style="display:flex;"><span>	<span style="color:#50fa7b">getResponse</span>(ch)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	log.<span style="color:#50fa7b">Println</span>(<span style="color:#f1fa8c">&#34;since: &#34;</span>, time.<span style="color:#50fa7b">Since</span>(now))
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">func</span> <span style="color:#50fa7b">longTimeRequest</span>(ch <span style="color:#8be9fd;font-style:italic">chan</span><span style="color:#ff79c6">&lt;-</span> <span style="color:#8be9fd">string</span>) {
</span></span><span style="display:flex;"><span>	now <span style="color:#ff79c6">:=</span> time.<span style="color:#50fa7b">Now</span>()
</span></span><span style="display:flex;"><span>	time.<span style="color:#50fa7b">Sleep</span>(time.Second)
</span></span><span style="display:flex;"><span>	ch <span style="color:#ff79c6">&lt;-</span> fmt.<span style="color:#50fa7b">Sprintf</span>(<span style="color:#f1fa8c">&#34;long time request response after: %v&#34;</span>, time.<span style="color:#50fa7b">Since</span>(now))
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">func</span> <span style="color:#50fa7b">getResponse</span>(ch <span style="color:#ff79c6">&lt;-</span><span style="color:#8be9fd;font-style:italic">chan</span> <span style="color:#8be9fd">string</span>) {
</span></span><span style="display:flex;"><span>	log.<span style="color:#50fa7b">Println</span>(<span style="color:#ff79c6">&lt;-</span>ch)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><strong>Ai nhanh thì thắng - The first response win</strong></p>
<p>Một ngày đẹp trời, cà rốt của bạn đăng story: tối nay tớ rảnh? Bạn suy nghĩ hết nửa tiếng đồng hồ rồi reply để hẹn địa điểm, thì nhận được câu trả lời là tớ set kèo đi với người khác rồi. Thực ra là dù có reply sớm thì cà rốt cũng chả đi với bạn đâu :v tuy nhiên bạn đến muộn thì người ta có cái cớ rất chi là hợp lí để từ chối. Không lan man nữa, vào việc thôi.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">func</span> <span style="color:#50fa7b">main</span>() {
</span></span><span style="display:flex;"><span>	now <span style="color:#ff79c6">:=</span> time.<span style="color:#50fa7b">Now</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	queue <span style="color:#ff79c6">:=</span> <span style="color:#bd93f9">10</span>
</span></span><span style="display:flex;"><span>	ok <span style="color:#ff79c6">:=</span> <span style="color:#8be9fd;font-style:italic">make</span>(<span style="color:#8be9fd;font-style:italic">chan</span> <span style="color:#8be9fd">int</span>, queue)
</span></span><span style="display:flex;"><span>	<span style="color:#ff79c6">for</span> i <span style="color:#ff79c6">:=</span> <span style="color:#bd93f9">0</span>; i &lt; queue; i<span style="color:#ff79c6">++</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#ff79c6">go</span> <span style="color:#50fa7b">reply</span>(ok, i)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#6272a4">// ai nhanh thì thắng
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>	firstRepsonse <span style="color:#ff79c6">:=</span> <span style="color:#ff79c6">&lt;-</span>ok
</span></span><span style="display:flex;"><span>	log.<span style="color:#50fa7b">Println</span>(<span style="color:#f1fa8c">&#34;since: &#34;</span>, time.<span style="color:#50fa7b">Since</span>(now), <span style="color:#f1fa8c">&#34;pos&#34;</span>, firstRepsonse)
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">func</span> <span style="color:#50fa7b">init</span>() {
</span></span><span style="display:flex;"><span>	rand.<span style="color:#50fa7b">Seed</span>(time.<span style="color:#50fa7b">Now</span>().<span style="color:#50fa7b">Unix</span>())
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">func</span> <span style="color:#50fa7b">reply</span>(ch <span style="color:#8be9fd;font-style:italic">chan</span><span style="color:#ff79c6">&lt;-</span> <span style="color:#8be9fd">int</span>, pos <span style="color:#8be9fd">int</span>) {
</span></span><span style="display:flex;"><span>	rd <span style="color:#ff79c6">:=</span> rand.<span style="color:#50fa7b">Intn</span>(<span style="color:#bd93f9">3</span>) <span style="color:#ff79c6">+</span> <span style="color:#bd93f9">1</span>
</span></span><span style="display:flex;"><span>	time.<span style="color:#50fa7b">Sleep</span>(time.<span style="color:#50fa7b">Duration</span>(rd) <span style="color:#ff79c6">*</span> time.Second)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	ch <span style="color:#ff79c6">&lt;-</span> pos
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Chú ý là phải dùng buffered channel để tránh ăn send block của channel nhé (goroutine leak problem). Đoạn code trên còn vấn đề là chẳng hạn cà rốt chỉ đăng tin cho người nào đó xem thôi, người đó reply rồi thì cà rốt thêm một tin mới là đã tìm được người cần tìm rồi. Thế là bạn cũng không cần reply lại nữa. Vậy xử lý thế nào nhỉ?</p>
<p>Câu trả lời là dùng context</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">func</span> <span style="color:#50fa7b">main</span>() {
</span></span><span style="display:flex;"><span>	now <span style="color:#ff79c6">:=</span> time.<span style="color:#50fa7b">Now</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	queue <span style="color:#ff79c6">:=</span> <span style="color:#bd93f9">10</span>
</span></span><span style="display:flex;"><span>	ok <span style="color:#ff79c6">:=</span> <span style="color:#8be9fd;font-style:italic">make</span>(<span style="color:#8be9fd;font-style:italic">chan</span> <span style="color:#8be9fd">int</span>, queue)
</span></span><span style="display:flex;"><span>	ctx, cancel <span style="color:#ff79c6">:=</span> context.<span style="color:#50fa7b">WithCancel</span>(context.<span style="color:#50fa7b">Background</span>())
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff79c6">for</span> i <span style="color:#ff79c6">:=</span> <span style="color:#bd93f9">0</span>; i &lt; queue; i<span style="color:#ff79c6">++</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#ff79c6">go</span> <span style="color:#50fa7b">reply</span>(ctx, ok, i)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#6272a4">// ai nhanh thì thắng
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>	firstRepsonse <span style="color:#ff79c6">:=</span> <span style="color:#ff79c6">&lt;-</span>ok
</span></span><span style="display:flex;"><span>	<span style="color:#50fa7b">cancel</span>()
</span></span><span style="display:flex;"><span>	log.<span style="color:#50fa7b">Println</span>(<span style="color:#f1fa8c">&#34;since: &#34;</span>, time.<span style="color:#50fa7b">Since</span>(now), <span style="color:#f1fa8c">&#34;pos&#34;</span>, firstRepsonse)
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">func</span> <span style="color:#50fa7b">init</span>() {
</span></span><span style="display:flex;"><span>	rand.<span style="color:#50fa7b">Seed</span>(time.<span style="color:#50fa7b">Now</span>().<span style="color:#50fa7b">Unix</span>())
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">func</span> <span style="color:#50fa7b">reply</span>(ctx context.Context, ch <span style="color:#8be9fd;font-style:italic">chan</span><span style="color:#ff79c6">&lt;-</span> <span style="color:#8be9fd">int</span>, pos <span style="color:#8be9fd">int</span>) {
</span></span><span style="display:flex;"><span>	rd <span style="color:#ff79c6">:=</span> rand.<span style="color:#50fa7b">Intn</span>(<span style="color:#bd93f9">3</span>) <span style="color:#ff79c6">+</span> <span style="color:#bd93f9">1</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff79c6">select</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#ff79c6">case</span> <span style="color:#ff79c6">&lt;-</span>time.<span style="color:#50fa7b">After</span>(time.<span style="color:#50fa7b">Duration</span>(rd) <span style="color:#ff79c6">*</span> time.Second):
</span></span><span style="display:flex;"><span>		log.<span style="color:#50fa7b">Println</span>(<span style="color:#f1fa8c">&#34;run&#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#ff79c6">case</span> <span style="color:#ff79c6">&lt;-</span>ctx.<span style="color:#50fa7b">Done</span>():
</span></span><span style="display:flex;"><span>		log.<span style="color:#50fa7b">Println</span>(<span style="color:#f1fa8c">&#34;cancel&#34;</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	ch <span style="color:#ff79c6">&lt;-</span> pos
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="sử-dụng-channel-để-notification">Sử dụng channel để notification</h2>
<p><strong>Đừng kể với ai nhé - 1-to-1 notification</strong></p>
<p>Một ngày đẹp trời, bạn được đi chơi riêng với cà rốt, có những điều từ lâu bạn đã muốn nói riêng với cô ấy. Hôm nay bạn mới có cơ hội vậy thì thắt dây an toàn và vào việc thôi.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">func</span> <span style="color:#50fa7b">main</span>() {
</span></span><span style="display:flex;"><span>	ch <span style="color:#ff79c6">:=</span> <span style="color:#8be9fd;font-style:italic">make</span>(<span style="color:#8be9fd;font-style:italic">chan</span> <span style="color:#8be9fd">string</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#ff79c6">go</span> <span style="color:#50fa7b">secret</span>(ch)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	log.<span style="color:#50fa7b">Println</span>(<span style="color:#ff79c6">&lt;-</span>ch)
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">func</span> <span style="color:#50fa7b">secret</span>(ch <span style="color:#8be9fd;font-style:italic">chan</span><span style="color:#ff79c6">&lt;-</span> <span style="color:#8be9fd">string</span>) {
</span></span><span style="display:flex;"><span>	time.<span style="color:#50fa7b">Sleep</span>(time.Second)
</span></span><span style="display:flex;"><span>	ch <span style="color:#ff79c6">&lt;-</span> <span style="color:#f1fa8c">&#34;this is secret&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><strong>Gửi đám bạn thân - 1-to-n notification</strong></p>
<p>Bên trên bạn chỉ thổ lộ riêng với cà rốt, bạn nghĩ điều đó là bí mật riêng của hai người, nhưng mà biết đâu được, bạn đâu kiểm soát được nó. Bí mật chỉ là bí mật khi chỉ có một người biết thôi. Ví dụ cô ấy gửi tấm chân tình của bạn đến đám bạn thân chẳng hạn :v.</p>
<p>Có nhiều cách để thực hiện 1-to-n notification. Cách đơn giản nhất là close channel. Do tính chất: sau khi close channel thì receive value từ channel luôn luôn không bị block (receive zero value).</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">func</span> <span style="color:#50fa7b">main</span>() {
</span></span><span style="display:flex;"><span>	ch <span style="color:#ff79c6">:=</span> <span style="color:#8be9fd;font-style:italic">make</span>(<span style="color:#8be9fd;font-style:italic">chan</span> <span style="color:#8be9fd">string</span>)
</span></span><span style="display:flex;"><span>	n <span style="color:#ff79c6">:=</span> <span style="color:#bd93f9">10</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff79c6">for</span> i <span style="color:#ff79c6">:=</span> <span style="color:#bd93f9">0</span>; i &lt; n; i<span style="color:#ff79c6">++</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#ff79c6">go</span> <span style="color:#50fa7b">notify</span>(ch)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#8be9fd;font-style:italic">close</span>(ch)
</span></span><span style="display:flex;"><span>	time.<span style="color:#50fa7b">Sleep</span>(time.Second)
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">func</span> <span style="color:#50fa7b">notify</span>(ch <span style="color:#ff79c6">&lt;-</span><span style="color:#8be9fd;font-style:italic">chan</span> <span style="color:#8be9fd">string</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#ff79c6">&lt;-</span>ch
</span></span><span style="display:flex;"><span>	fmt.<span style="color:#50fa7b">Println</span>(<span style="color:#f1fa8c">&#34;receive notify&#34;</span>)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><strong>Phản hồi về bí mật - n-to-1 notification</strong></p>
<p>Bí mật của bạn bị chia sẻ ra thì có lẽ nó cũng sẽ nhận được nhiều lời bàn tán. Cách dễ nhất để nhận nhiều lời bàn tán là dùng sync.WaitGroup.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">func</span> <span style="color:#50fa7b">main</span>() {
</span></span><span style="display:flex;"><span>	n <span style="color:#ff79c6">:=</span> <span style="color:#bd93f9">10</span>
</span></span><span style="display:flex;"><span>	wg <span style="color:#ff79c6">:=</span> <span style="color:#ff79c6">&amp;</span>sync.WaitGroup{}
</span></span><span style="display:flex;"><span>	wg.<span style="color:#50fa7b">Add</span>(n)
</span></span><span style="display:flex;"><span>	<span style="color:#ff79c6">for</span> i <span style="color:#ff79c6">:=</span> <span style="color:#bd93f9">0</span>; i &lt; n; i<span style="color:#ff79c6">++</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#ff79c6">go</span> <span style="color:#50fa7b">notify</span>(wg)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	wg.<span style="color:#50fa7b">Wait</span>()
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">func</span> <span style="color:#50fa7b">notify</span>(wg <span style="color:#ff79c6">*</span>sync.WaitGroup) {
</span></span><span style="display:flex;"><span>	<span style="color:#ff79c6">defer</span> wg.<span style="color:#50fa7b">Done</span>()
</span></span><span style="display:flex;"><span>	fmt.<span style="color:#50fa7b">Println</span>(<span style="color:#f1fa8c">&#34;send notify&#34;</span>)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><strong>Sử dụng channels như Mutex Locks</strong></p>
<p>Channel với capacity bằng 1 có thể sử dụng như buffered channel. Tuy nhiên thì dùng cho vui thôi chứ thực tế chả ai dùng channel chỉ để implement lại cái mutex làm gì cả :3</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">type</span> empty <span style="color:#8be9fd;font-style:italic">struct</span>{}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">func</span> <span style="color:#50fa7b">main</span>() {
</span></span><span style="display:flex;"><span>	ch <span style="color:#ff79c6">:=</span> <span style="color:#8be9fd;font-style:italic">make</span>(<span style="color:#8be9fd;font-style:italic">chan</span> empty, <span style="color:#bd93f9">1</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	cnt <span style="color:#ff79c6">:=</span> <span style="color:#bd93f9">0</span>
</span></span><span style="display:flex;"><span>	wg <span style="color:#ff79c6">:=</span> sync.WaitGroup{}
</span></span><span style="display:flex;"><span>	n <span style="color:#ff79c6">:=</span> <span style="color:#bd93f9">100</span>
</span></span><span style="display:flex;"><span>	wg.<span style="color:#50fa7b">Add</span>(n)
</span></span><span style="display:flex;"><span>	<span style="color:#ff79c6">for</span> i <span style="color:#ff79c6">:=</span> <span style="color:#bd93f9">0</span>; i &lt; n; i<span style="color:#ff79c6">++</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#ff79c6">go</span> <span style="color:#8be9fd;font-style:italic">func</span>() {
</span></span><span style="display:flex;"><span>			<span style="color:#ff79c6">defer</span> wg.<span style="color:#50fa7b">Done</span>()
</span></span><span style="display:flex;"><span>			<span style="color:#ff79c6">for</span> i <span style="color:#ff79c6">:=</span> <span style="color:#bd93f9">0</span>; i &lt; <span style="color:#bd93f9">1000</span>; i<span style="color:#ff79c6">++</span> {
</span></span><span style="display:flex;"><span>				ch <span style="color:#ff79c6">&lt;-</span> empty{}
</span></span><span style="display:flex;"><span>				cnt<span style="color:#ff79c6">++</span>
</span></span><span style="display:flex;"><span>				<span style="color:#ff79c6">&lt;-</span>ch
</span></span><span style="display:flex;"><span>			}
</span></span><span style="display:flex;"><span>		}()
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	wg.<span style="color:#50fa7b">Wait</span>()
</span></span><span style="display:flex;"><span>	log.<span style="color:#50fa7b">Println</span>(<span style="color:#f1fa8c">&#34;cnt: &#34;</span>, cnt)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Đoạn code trên dùng channel để đảm bảo synchronize cho biến cnt. Channel phải là buffered channel với cap = 1 để đảm bảo lần lock đầu tiên không bị block. Nếu không sẽ bị deadlock do ông nào cũng đòi khóa mà không ai chịu trả khóa.</p>
<h2 id="sử-dụng-channels-như-counting-semaphores">Sử dụng channels như Counting Semaphores</h2>
<p>Buffered channel có thể sử dụng để implement semaphores. Counting semaphore có thể xem là multi-owner locks. Nếu cap của một channel là N thì nó có thể xem là một cái khóa cho phép N người sử dụng tại một thời điểm. Counting semaphores thường được sử dụng để giới hạn số lượng tài nguyên như số lượng concurrent request tối đa &hellip;</p>
<p>Ví dụ khi bạn vào quán cafe, quán chỉ phục vụ một số lượng chỗ ngồi nhất định, hết chỗ thì &hellip; mời bạn về. Dĩ nhiên rồi, chả nhẽ bạn lại đứng để uống cafe, mà có khi chỗ còn không có mà đứng ấy chứ. Thế làm sao để thông báo cho khách biết là đã hết chỗ rồi (ví dụ như khách đặt bàn online). Cách đơn giản là bạn phải duy trì một biến để đếm số lượng khách trong quán.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">type</span> Seat <span style="color:#8be9fd">int</span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">type</span> Bar <span style="color:#8be9fd;font-style:italic">chan</span> Seat
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">func</span> (bar Bar) <span style="color:#50fa7b">ServeCustomer</span>(c <span style="color:#8be9fd">int</span>) {
</span></span><span style="display:flex;"><span>	log.<span style="color:#50fa7b">Print</span>(<span style="color:#f1fa8c">&#34;customer#&#34;</span>, c, <span style="color:#f1fa8c">&#34; enters the bar&#34;</span>)
</span></span><span style="display:flex;"><span>	seat <span style="color:#ff79c6">:=</span> <span style="color:#ff79c6">&lt;-</span>bar <span style="color:#6272a4">// receive value from bar
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>	log.<span style="color:#50fa7b">Print</span>(<span style="color:#f1fa8c">&#34;++ customer#&#34;</span>, c, <span style="color:#f1fa8c">&#34;drinks at seat#&#34;</span>, seat)
</span></span><span style="display:flex;"><span>	time.<span style="color:#50fa7b">Sleep</span>(time.Second <span style="color:#ff79c6">*</span> time.<span style="color:#50fa7b">Duration</span>(<span style="color:#bd93f9">10</span><span style="color:#ff79c6">+</span>rand.<span style="color:#50fa7b">Intn</span>(<span style="color:#bd93f9">6</span>)))
</span></span><span style="display:flex;"><span>	log.<span style="color:#50fa7b">Print</span>(<span style="color:#f1fa8c">&#34;-- customer#&#34;</span>, c, <span style="color:#f1fa8c">&#34; free seat#&#34;</span>, seat)
</span></span><span style="display:flex;"><span>	bar <span style="color:#ff79c6">&lt;-</span> seat <span style="color:#6272a4">// release
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">func</span> <span style="color:#50fa7b">main</span>() {
</span></span><span style="display:flex;"><span>	rand.<span style="color:#50fa7b">Seed</span>(time.<span style="color:#50fa7b">Now</span>().<span style="color:#50fa7b">UnixNano</span>())
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	bar24x7 <span style="color:#ff79c6">:=</span> <span style="color:#8be9fd;font-style:italic">make</span>(Bar, <span style="color:#bd93f9">10</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#ff79c6">for</span> seatId <span style="color:#ff79c6">:=</span> <span style="color:#bd93f9">0</span>; seatId &lt; <span style="color:#8be9fd;font-style:italic">cap</span>(bar24x7); seatId<span style="color:#ff79c6">++</span> {
</span></span><span style="display:flex;"><span>		bar24x7 <span style="color:#ff79c6">&lt;-</span> <span style="color:#50fa7b">Seat</span>(seatId)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff79c6">for</span> customerId <span style="color:#ff79c6">:=</span> <span style="color:#bd93f9">0</span>; ; customerId<span style="color:#ff79c6">++</span> {
</span></span><span style="display:flex;"><span>		log.<span style="color:#50fa7b">Println</span>(<span style="color:#f1fa8c">&#34;num goroutine: &#34;</span>, runtime.<span style="color:#50fa7b">NumGoroutine</span>())
</span></span><span style="display:flex;"><span>		<span style="color:#ff79c6">go</span> bar24x7.<span style="color:#50fa7b">ServeCustomer</span>(customerId)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Đoạn code trên đảm bảo chỉ có nhiều nhất 10 người được phục vụ tại một thời điểm. Mặc dù chỉ có nhiều nhất 10 người được phục vụ tại một thời điểm, tuy nhiên có nhiều hơn 10 customers ở trong hàng đợi để chờ phục vụ (&gt; 10 goroutines), càng lâu thì số lượng goroutine này càng lớn. Từ đó sẽ bị tồn đọng và không bao giờ xử lý hết. Do tốc độ tạo mới nhiều hơn tốc độ consume.</p>
<p>Vậy làm sao để giới hạn số lượng goroutine có thể tạo ra? Ý tưởng là dùng một buffered channel với cap là số lượng channel lớn nhất có thể tồn tại tại một thời điểm.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">type</span> Seat <span style="color:#8be9fd">int</span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">type</span> Bar <span style="color:#8be9fd;font-style:italic">chan</span> Seat
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">func</span> (bar Bar) <span style="color:#50fa7b">ServeCustomer</span>(c <span style="color:#8be9fd">int</span>, seat Seat) {
</span></span><span style="display:flex;"><span>	log.<span style="color:#50fa7b">Print</span>(<span style="color:#f1fa8c">&#34;++ customer#&#34;</span>, c, <span style="color:#f1fa8c">&#34;drinks at seat#&#34;</span>, seat)
</span></span><span style="display:flex;"><span>	time.<span style="color:#50fa7b">Sleep</span>(time.Second <span style="color:#ff79c6">*</span> time.<span style="color:#50fa7b">Duration</span>(<span style="color:#bd93f9">2</span><span style="color:#ff79c6">+</span>rand.<span style="color:#50fa7b">Intn</span>(<span style="color:#bd93f9">6</span>)))
</span></span><span style="display:flex;"><span>	log.<span style="color:#50fa7b">Print</span>(<span style="color:#f1fa8c">&#34;-- customer#&#34;</span>, c, <span style="color:#f1fa8c">&#34; free seat#&#34;</span>, seat)
</span></span><span style="display:flex;"><span>	bar <span style="color:#ff79c6">&lt;-</span> seat <span style="color:#6272a4">// free seat and leave the bar
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">func</span> <span style="color:#50fa7b">main</span>() {
</span></span><span style="display:flex;"><span>	rand.<span style="color:#50fa7b">Seed</span>(time.<span style="color:#50fa7b">Now</span>().<span style="color:#50fa7b">UnixNano</span>())
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	bar24x7 <span style="color:#ff79c6">:=</span> <span style="color:#8be9fd;font-style:italic">make</span>(Bar, <span style="color:#bd93f9">10</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#ff79c6">for</span> seatId <span style="color:#ff79c6">:=</span> <span style="color:#bd93f9">0</span>; seatId &lt; <span style="color:#8be9fd;font-style:italic">cap</span>(bar24x7); seatId<span style="color:#ff79c6">++</span> {
</span></span><span style="display:flex;"><span>		bar24x7 <span style="color:#ff79c6">&lt;-</span> <span style="color:#50fa7b">Seat</span>(seatId)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff79c6">for</span> customerId <span style="color:#ff79c6">:=</span> <span style="color:#bd93f9">0</span>; ; customerId<span style="color:#ff79c6">++</span> {
</span></span><span style="display:flex;"><span>		log.<span style="color:#50fa7b">Println</span>(<span style="color:#f1fa8c">&#34;num goroutine: &#34;</span>, runtime.<span style="color:#50fa7b">NumGoroutine</span>())
</span></span><span style="display:flex;"><span>		<span style="color:#6272a4">// Need a seed to serve next customer
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>		seat <span style="color:#ff79c6">:=</span> <span style="color:#ff79c6">&lt;-</span>bar24x7
</span></span><span style="display:flex;"><span>		<span style="color:#ff79c6">go</span> bar24x7.<span style="color:#50fa7b">ServeCustomer</span>(customerId, seat)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Đoạn chương trình trên chỉ đảm bảo được có 10 goroutines tồn tại đồng thời. Tuy nhiên cần tạo rất nhiều goroutines trong quá trình hoạt động (mỗi khi free seat thì lại cần tạo một goroutine mới để xử lý).</p>
<p>Để tối ưu hơn, cần viết một chương trình đảm bảo chỉ có tối đa 10 goroutines tồn tại đồng thời và tối đa 10 goroutines được tạo ra. Đoạn code dưới đây thực hiện yêu cầu này.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">func</span> <span style="color:#50fa7b">main</span>() {
</span></span><span style="display:flex;"><span>	rand.<span style="color:#50fa7b">Seed</span>(time.<span style="color:#50fa7b">Now</span>().<span style="color:#50fa7b">UnixNano</span>())
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	maxServe <span style="color:#ff79c6">:=</span> <span style="color:#bd93f9">10</span>
</span></span><span style="display:flex;"><span>	consumers <span style="color:#ff79c6">:=</span> <span style="color:#8be9fd;font-style:italic">make</span>(<span style="color:#8be9fd;font-style:italic">chan</span> <span style="color:#8be9fd">int</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#ff79c6">for</span> i <span style="color:#ff79c6">:=</span> <span style="color:#bd93f9">0</span>; i &lt; maxServe; i<span style="color:#ff79c6">++</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#ff79c6">go</span> <span style="color:#50fa7b">serveCustomer</span>(consumers)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff79c6">for</span> i <span style="color:#ff79c6">:=</span> <span style="color:#bd93f9">0</span>; ; i<span style="color:#ff79c6">++</span> {
</span></span><span style="display:flex;"><span>		log.<span style="color:#50fa7b">Println</span>(<span style="color:#f1fa8c">&#34;num goroutines:&#34;</span>, runtime.<span style="color:#50fa7b">NumGoroutine</span>())
</span></span><span style="display:flex;"><span>		consumers <span style="color:#ff79c6">&lt;-</span> i
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">func</span> <span style="color:#50fa7b">serveCustomer</span>(consumers <span style="color:#8be9fd;font-style:italic">chan</span> <span style="color:#8be9fd">int</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#ff79c6">for</span> consumer <span style="color:#ff79c6">:=</span> <span style="color:#ff79c6">range</span> consumers {
</span></span><span style="display:flex;"><span>		log.<span style="color:#50fa7b">Println</span>(<span style="color:#f1fa8c">&#34;++ customer#&#34;</span>, consumer, <span style="color:#f1fa8c">&#34;drinks at the bar&#34;</span>)
</span></span><span style="display:flex;"><span>		time.<span style="color:#50fa7b">Sleep</span>(time.Second <span style="color:#ff79c6">*</span> time.<span style="color:#50fa7b">Duration</span>(<span style="color:#bd93f9">2</span><span style="color:#ff79c6">+</span>rand.<span style="color:#50fa7b">Intn</span>(<span style="color:#bd93f9">6</span>)))
</span></span><span style="display:flex;"><span>		log.<span style="color:#50fa7b">Println</span>(<span style="color:#f1fa8c">&#34;-- customer#&#34;</span>, consumer, <span style="color:#f1fa8c">&#34;leaves the bar&#34;</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="channel-encapsulated-in-channel">Channel Encapsulated in Channel</h2>
<h2 id="try-send-và-try-receive-đến-channel">Try-Send và Try-Receive đến channel</h2>
<p>Khi sử dụng select block với nhánh default và chỉ một nhánh case được gọi là try-send hoặc try-receive (tùy vào nhánh case triển khai ra sao). Try-send và try-receive không bao giờ block.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">func</span> <span style="color:#50fa7b">main</span>() {
</span></span><span style="display:flex;"><span>	<span style="color:#8be9fd;font-style:italic">type</span> Book <span style="color:#8be9fd;font-style:italic">struct</span>{ id <span style="color:#8be9fd">int</span> }
</span></span><span style="display:flex;"><span>	bookshelf <span style="color:#ff79c6">:=</span> <span style="color:#8be9fd;font-style:italic">make</span>(<span style="color:#8be9fd;font-style:italic">chan</span> Book, <span style="color:#bd93f9">3</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff79c6">for</span> i <span style="color:#ff79c6">:=</span> <span style="color:#bd93f9">0</span>; i &lt; <span style="color:#8be9fd;font-style:italic">cap</span>(bookshelf)<span style="color:#ff79c6">*</span><span style="color:#bd93f9">2</span>; i<span style="color:#ff79c6">++</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#ff79c6">select</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#ff79c6">case</span> bookshelf <span style="color:#ff79c6">&lt;-</span> Book{id: i}:
</span></span><span style="display:flex;"><span>			fmt.<span style="color:#50fa7b">Println</span>(<span style="color:#f1fa8c">&#34;succeeded to put book&#34;</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#ff79c6">default</span>:
</span></span><span style="display:flex;"><span>			fmt.<span style="color:#50fa7b">Println</span>(<span style="color:#f1fa8c">&#34;failed to put book&#34;</span>)
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff79c6">for</span> i <span style="color:#ff79c6">:=</span> <span style="color:#bd93f9">0</span>; i &lt; <span style="color:#8be9fd;font-style:italic">cap</span>(bookshelf)<span style="color:#ff79c6">*</span><span style="color:#bd93f9">2</span>; i<span style="color:#ff79c6">++</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#ff79c6">select</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#ff79c6">case</span> book <span style="color:#ff79c6">:=</span> <span style="color:#ff79c6">&lt;-</span>bookshelf:
</span></span><span style="display:flex;"><span>			fmt.<span style="color:#50fa7b">Println</span>(<span style="color:#f1fa8c">&#34;succeeded to get book&#34;</span>, book.id)
</span></span><span style="display:flex;"><span>		<span style="color:#ff79c6">default</span>:
</span></span><span style="display:flex;"><span>			fmt.<span style="color:#50fa7b">Println</span>(<span style="color:#f1fa8c">&#34;failed to get book&#34;</span>)
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><strong>Check if a channel is closed without blocking the current goroutine</strong></p>
<p>Nếu có thể chắc chắn rằng không có values nào gửi đến channel nữa thì ta có thể sử dụng đoạn code sau (concurrently and safely) để kiểm tra xem một channel đã close hay chưa mà không cần block goroutine hiện tại.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">func</span> <span style="color:#50fa7b">isClose</span>(c <span style="color:#8be9fd;font-style:italic">chan</span> <span style="color:#8be9fd">int</span>) <span style="color:#8be9fd">bool</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#ff79c6">select</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#ff79c6">case</span> _, ok <span style="color:#ff79c6">:=</span> <span style="color:#ff79c6">&lt;-</span>c:
</span></span><span style="display:flex;"><span>		<span style="color:#ff79c6">return</span> ok
</span></span><span style="display:flex;"><span>	<span style="color:#ff79c6">default</span>:
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff79c6">return</span> <span style="color:#ff79c6">false</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><strong>Peak/burst limiting</strong></p>
<h2 id="các-cách-khác-để-implement-first-response-win">Các cách khác để implement first-response win</h2>
<p>Ta có thể sử dụng select mechanism (try-send) với buffered channel có capacity bằng 1 (ít nhất 1) để implement first-response-win.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">func</span> <span style="color:#50fa7b">main</span>() {
</span></span><span style="display:flex;"><span>	rand.<span style="color:#50fa7b">Seed</span>(time.<span style="color:#50fa7b">Now</span>().<span style="color:#50fa7b">UnixNano</span>())
</span></span><span style="display:flex;"><span>	c <span style="color:#ff79c6">:=</span> <span style="color:#8be9fd;font-style:italic">make</span>(<span style="color:#8be9fd;font-style:italic">chan</span> <span style="color:#8be9fd">int</span>, <span style="color:#bd93f9">1</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#ff79c6">for</span> i <span style="color:#ff79c6">:=</span> <span style="color:#bd93f9">0</span>; i &lt; <span style="color:#bd93f9">5</span>; i<span style="color:#ff79c6">++</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#ff79c6">go</span> <span style="color:#50fa7b">source</span>(c)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	rnd <span style="color:#ff79c6">:=</span> <span style="color:#ff79c6">&lt;-</span>c <span style="color:#6272a4">// only the first response win
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>	fmt.<span style="color:#50fa7b">Println</span>(rnd)
</span></span><span style="display:flex;"><span>	<span style="color:#ff79c6">select</span> {}
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">func</span> <span style="color:#50fa7b">source</span>(c <span style="color:#8be9fd;font-style:italic">chan</span><span style="color:#ff79c6">&lt;-</span> <span style="color:#8be9fd">int</span>) {
</span></span><span style="display:flex;"><span>	now <span style="color:#ff79c6">:=</span> time.<span style="color:#50fa7b">Now</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#ff79c6">defer</span> <span style="color:#8be9fd;font-style:italic">func</span>() {
</span></span><span style="display:flex;"><span>		log.<span style="color:#50fa7b">Println</span>(<span style="color:#f1fa8c">&#34;end call to source after:&#34;</span>, time.<span style="color:#50fa7b">Since</span>(now))
</span></span><span style="display:flex;"><span>	}()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	fmt.<span style="color:#50fa7b">Println</span>(<span style="color:#f1fa8c">&#34;call to source&#34;</span>)
</span></span><span style="display:flex;"><span>	ra, rb <span style="color:#ff79c6">:=</span> rand.<span style="color:#50fa7b">Int</span>(), rand.<span style="color:#50fa7b">Intn</span>(<span style="color:#bd93f9">3</span>)<span style="color:#ff79c6">+</span><span style="color:#bd93f9">1</span>
</span></span><span style="display:flex;"><span>	<span style="color:#6272a4">// Sleep 1s, 2s, 3s
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>	time.<span style="color:#50fa7b">Sleep</span>(time.<span style="color:#50fa7b">Duration</span>(rb) <span style="color:#ff79c6">*</span> time.Second)
</span></span><span style="display:flex;"><span>	<span style="color:#6272a4">// try send
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>	<span style="color:#ff79c6">select</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#ff79c6">case</span> c <span style="color:#ff79c6">&lt;-</span> ra:
</span></span><span style="display:flex;"><span>	<span style="color:#ff79c6">default</span>:
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Phiên bản trên kết quả thì đúng nhưng sử dụng tài nguyên là thừa thãi. Do khi đã có first-response rồi thì không cần phải tiếp tục thực thi việc gọi đến source nữa.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">func</span> <span style="color:#50fa7b">main</span>() {
</span></span><span style="display:flex;"><span>	ctx, cancel <span style="color:#ff79c6">:=</span> context.<span style="color:#50fa7b">WithCancel</span>(context.<span style="color:#50fa7b">Background</span>())
</span></span><span style="display:flex;"><span>	c <span style="color:#ff79c6">:=</span> <span style="color:#8be9fd;font-style:italic">make</span>(<span style="color:#8be9fd;font-style:italic">chan</span> <span style="color:#8be9fd">int</span>, <span style="color:#bd93f9">1</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#ff79c6">for</span> i <span style="color:#ff79c6">:=</span> <span style="color:#bd93f9">0</span>; i &lt; <span style="color:#bd93f9">5</span>; i<span style="color:#ff79c6">++</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#ff79c6">go</span> <span style="color:#50fa7b">source</span>(ctx, c)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	rnd <span style="color:#ff79c6">:=</span> <span style="color:#ff79c6">&lt;-</span>c <span style="color:#6272a4">// only the first response win
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>	<span style="color:#50fa7b">cancel</span>()
</span></span><span style="display:flex;"><span>	log.<span style="color:#50fa7b">Println</span>(<span style="color:#f1fa8c">&#34;winner: &#34;</span>, rnd)
</span></span><span style="display:flex;"><span>	time.<span style="color:#50fa7b">Sleep</span>(time.Second <span style="color:#ff79c6">*</span> <span style="color:#bd93f9">5</span>)
</span></span><span style="display:flex;"><span>	fmt.<span style="color:#50fa7b">Println</span>(<span style="color:#f1fa8c">&#34;number of goroutines:&#34;</span>, runtime.<span style="color:#50fa7b">NumGoroutine</span>())
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">func</span> <span style="color:#50fa7b">source</span>(ctx context.Context, c <span style="color:#8be9fd;font-style:italic">chan</span><span style="color:#ff79c6">&lt;-</span> <span style="color:#8be9fd">int</span>) {
</span></span><span style="display:flex;"><span>	now <span style="color:#ff79c6">:=</span> time.<span style="color:#50fa7b">Now</span>()
</span></span><span style="display:flex;"><span>	fn <span style="color:#ff79c6">:=</span> <span style="color:#8be9fd;font-style:italic">func</span>(ctx context.Context) <span style="color:#ff79c6">&lt;-</span><span style="color:#8be9fd;font-style:italic">chan</span> <span style="color:#8be9fd">int</span> {
</span></span><span style="display:flex;"><span>		rand.<span style="color:#50fa7b">Seed</span>(time.<span style="color:#50fa7b">Now</span>().<span style="color:#50fa7b">UnixNano</span>())
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		fmt.<span style="color:#50fa7b">Println</span>(<span style="color:#f1fa8c">&#34;call to source&#34;</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#6272a4">// try-send
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>		ch <span style="color:#ff79c6">:=</span> <span style="color:#8be9fd;font-style:italic">make</span>(<span style="color:#8be9fd;font-style:italic">chan</span> <span style="color:#8be9fd">int</span>, <span style="color:#bd93f9">1</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		ra, rb <span style="color:#ff79c6">:=</span> rand.<span style="color:#50fa7b">Int</span>(), rand.<span style="color:#50fa7b">Intn</span>(<span style="color:#bd93f9">3</span>)<span style="color:#ff79c6">+</span><span style="color:#bd93f9">1</span>
</span></span><span style="display:flex;"><span>		<span style="color:#ff79c6">select</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#6272a4">// simulate work load, we don&#39;t need to call when context is canceled
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>		<span style="color:#ff79c6">case</span> <span style="color:#ff79c6">&lt;-</span>time.<span style="color:#50fa7b">After</span>(time.<span style="color:#50fa7b">Duration</span>(rb) <span style="color:#ff79c6">*</span> time.Second):
</span></span><span style="display:flex;"><span>			<span style="color:#ff79c6">defer</span> <span style="color:#8be9fd;font-style:italic">func</span>() {
</span></span><span style="display:flex;"><span>				log.<span style="color:#50fa7b">Println</span>(<span style="color:#f1fa8c">&#34;end call to source after:&#34;</span>, time.<span style="color:#50fa7b">Since</span>(now))
</span></span><span style="display:flex;"><span>			}()
</span></span><span style="display:flex;"><span>			ch <span style="color:#ff79c6">&lt;-</span> ra
</span></span><span style="display:flex;"><span>		<span style="color:#ff79c6">case</span> <span style="color:#ff79c6">&lt;-</span>ctx.<span style="color:#50fa7b">Done</span>():
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#ff79c6">return</span> ch
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff79c6">select</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#ff79c6">case</span> <span style="color:#ff79c6">&lt;-</span>ctx.<span style="color:#50fa7b">Done</span>():
</span></span><span style="display:flex;"><span>		log.<span style="color:#50fa7b">Println</span>(ctx.<span style="color:#50fa7b">Err</span>())
</span></span><span style="display:flex;"><span>	<span style="color:#ff79c6">case</span> v <span style="color:#ff79c6">:=</span> <span style="color:#ff79c6">&lt;-</span><span style="color:#50fa7b">fn</span>(ctx):
</span></span><span style="display:flex;"><span>		<span style="color:#ff79c6">select</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#ff79c6">case</span> c <span style="color:#ff79c6">&lt;-</span> v:
</span></span><span style="display:flex;"><span>		<span style="color:#ff79c6">default</span>:
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div>]]></description>
      
    </item>
    
    
    
    <item>
      <title>Automatic connect to VPN</title>
      <link>https://idev-blog.web.app/posts/linux-auto-connect-openvpn/</link>
      <pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://idev-blog.web.app/posts/linux-auto-connect-openvpn/</guid>
      <description><![CDATA[<p>The OpenVPN is an open source Virtual Private Network (VPN) project. It creates secure connections over the Internet using a custom security protocol that utilizes SSL/TLS.</p>
<p>In this article, i will introduce naive solution for automatic connect to VPN using openvpn and systemd management.</p>
<p><strong>Create vpn script</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#6272a4"># Create script connect to vpn</span>
</span></span><span style="display:flex;"><span>mkdir -p ~/scripts
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">cd</span> ~/scripts
</span></span><span style="display:flex;"><span>touch vpn.sh
</span></span><span style="display:flex;"><span>sudo chmod +x vpn.sh
</span></span></code></pre></div><p><strong>Install oauthtool</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo apt install oathtool 
</span></span></code></pre></div><p><strong>~/scripts/vpn.sh</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">VPN_USER</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;&#34;</span> <span style="color:#6272a4"># insert vpn user here</span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">VPN_PASSWORD</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;&#34;</span>  <span style="color:#6272a4"># insert vpn password here</span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">OTP_KEY</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;&#34;</span> <span style="color:#6272a4"># insert otp key here</span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">OVPN_FILE</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;&#34;</span> <span style="color:#6272a4"># insert path to .ovpn file here. example /home/admicro-bigdata.ovpn</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">VPN_AUTH</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;</span><span style="color:#ff79c6">$(</span>oathtool -b --totp <span style="color:#8be9fd;font-style:italic">$OTP_KEY</span><span style="color:#ff79c6">)</span><span style="color:#8be9fd;font-style:italic">$VPN_PASSWORD</span><span style="color:#f1fa8c">&#34;</span> 
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">echo</span> <span style="color:#8be9fd;font-style:italic">$VPN_PASSWORD</span> | sudo -S bash -c <span style="color:#f1fa8c">&#34;openvpn --config </span><span style="color:#8be9fd;font-style:italic">$OVPN_FILE</span><span style="color:#f1fa8c"> --auth-user-pass &lt;(echo -e &#39;</span><span style="color:#8be9fd;font-style:italic">$VPN_USER</span><span style="color:#f1fa8c">\n</span><span style="color:#8be9fd;font-style:italic">$VPN_AUTH</span><span style="color:#f1fa8c">&#39;) --daemon&#34;</span>
</span></span></code></pre></div><p><strong>Create systemd service</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">cd</span> /lib/systemd/system
</span></span><span style="display:flex;"><span>sudo touch vpn.service
</span></span></code></pre></div><p><strong>/lib/systemd/system/vpn.service</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-txt" data-lang="txt"><span style="display:flex;"><span>[Unit]
</span></span><span style="display:flex;"><span>Description=Auto connect vccorp&#39;s vpn service.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>[Service]
</span></span><span style="display:flex;"><span>Type=forking
</span></span><span style="display:flex;"><span>User=root
</span></span><span style="display:flex;"><span># path to vpn file, example: /home/ngoctd/scripts/vpn.sh
</span></span><span style="display:flex;"><span>ExecStart=/bin/bash /home/ngoctd/scripts/vpn.sh
</span></span><span style="display:flex;"><span># path to vpn file, example: /home/ngoctd/scripts/vpn.sh
</span></span><span style="display:flex;"><span>ExecReload= /bin/bash /home/ngoctd/scripts/vpn.sh
</span></span><span style="display:flex;"><span>ExecStop=sudo killall openvpn
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Restart=on-failure
</span></span><span style="display:flex;"><span>RestartSec=10s
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>[Install]
</span></span><span style="display:flex;"><span>WantedBy=multi-user.target
</span></span></code></pre></div><p><strong>start,stop,auto restart service</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo systemctl daemon-reload <span style="color:#6272a4"># reload systemd daemon</span>
</span></span><span style="display:flex;"><span>sudo systemctl <span style="color:#8be9fd;font-style:italic">enable</span> vpn <span style="color:#6272a4"># auto start when vpn was killed</span>
</span></span><span style="display:flex;"><span>sudo systemctl start vpn <span style="color:#6272a4"># start vpn</span>
</span></span><span style="display:flex;"><span>sudo systemctl status vpn <span style="color:#6272a4"># check vpn status</span>
</span></span><span style="display:flex;"><span>sudo systemctl stop vpn <span style="color:#6272a4"># stop vpn</span>
</span></span></code></pre></div>]]></description>
      
    </item>
    
    
    
    <item>
      <title>Channel in Golang</title>
      <link>https://idev-blog.web.app/posts/programming-language-channel-in-golang/</link>
      <pubDate>Sat, 05 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://idev-blog.web.app/posts/programming-language-channel-in-golang/</guid>
      <description><![CDATA[<p>Channel is an important built-in feature in Go. It is one of the features makes Go unique. Channel makes concurrent programming convenient, fun and lowers the difficulties of concurrent programming. Channel mainly acts as a concurrency synchronization technique. To understand channels better, the internal structure of channels and some implementation details by the standard Go compiler/runtime are also simply described.</p>
<h2 id="channel-introduction">Channel Introduction</h2>
<p>Don&rsquo;t communicate by sharing memory, share memory by communicating.</p>
<p>Communicating by sharing memory and sharing by communicating are two programming manners in concurrent programming. When goroutines communicate by sharing memory, we use traditional concurrency sychronization techniques, such as mutex locks, to protect the shared memory to prevent data racts.</p>
<p>Go also provides another concurrency sychronization technique, channel. Channels make goroutines share memory by communicating. We can view a channel as an internal FIFO queu within a program. Some goroutines send values to the queue (the channel) and some other goroutines receive values from the queue.</p>
<p>Along with transfering values (through channels), the ownership of some values may also be transferred between goroutines (ownership on logic view). When a goroutine send a value to a channel, we can view the goroutine releases the ownership of some values. When a goroutine receives a value from a channel, we can view the goroutine acquires the ownerships of some values.</p>
<h2 id="channel-value-comparisons">Channel Value Comparisons</h2>
<p>All channel types are comparable types.
If one channel value is assigned to another, the two channels share the same underlying part(s). In other words, those two channels represent the same internal channel object. The result of comparing them is true.</p>
<h2 id="detailed-explanations-for-channel-operations">Detailed Explanations for Channel Operations</h2>
<table>
<thead>
<tr>
<th>Operation</th>
<th>A Nil Channel</th>
<th>A Closed Channel</th>
<th>A Not-Closed Non-Nil Channel</th>
</tr>
</thead>
<tbody>
<tr>
<td>Close</td>
<td>panic</td>
<td>panic</td>
<td>success</td>
</tr>
<tr>
<td>Send Value To</td>
<td>block for ever</td>
<td>panic</td>
<td>block or succeed to send</td>
</tr>
<tr>
<td>Receive value from</td>
<td>block for ever</td>
<td>never block</td>
<td>block or success to receive</td>
</tr>
</tbody>
</table>
<p>To bettern understand channel types and values, and to make some explainations easier, looking in the raw internal structures of internal channel objects is very helpful.</p>
<p>We can think of each channel consistin of three queues internally:</p>
<ol>
<li>
<p>The receiving goroutine queue (generally FIFO). The queue is a linked list without size limitation. Goroutines in this queue are all in blocking state and waiting to receive values from that channel.</p>
</li>
<li>
<p>The sending goroutine queue (generally FIFO). The queue is also a linked list without size limitation. Goroutines in this queue are all in blocking state and waiting to send values to that channel.</p>
</li>
<li>
<p>The value buffer queue (absolutely FIFO). This is a circular queue. Its size is equal to the capacity of the channel. If the current number of values stored in the value buffer queue of the channel reaches the capacity of the channel, the channel is called in full status. If no values are store in the value buffer queue of the channel currently, the channel is called in empty status. For a zero-capacity (unbuffered) channel is also in both full and empty status.</p>
</li>
</ol>
<p><strong>Each channel internally holds a mutex lock which is used to avoid data races in all kinds of operations</strong></p>
<h3 id="channel-operation-try-to-receive">Channel operation: try to receive</h3>
<p>When a goroutine R tries to receive a value from a not-closed non-nil channel, the goroutine R will acquire the lock associated with the channel firstly, the do the following steps until one condition is satisfied.</p>
<ol>
<li>Check buffer, if the value buffer queue of the channel is not empty. The receiving goroutine queue of the channel must be empty ( buffer != empty =&gt; receiveing queue == emtpy ). The goroutine R will receive (by unshifting) a value from the value buffer queue. If the sending goroutine queue of the channel is also not empty, a sending goroutine will be unshifted out of the sending goroutine queue and resumed to running state again. The value the just unshifted sending goroutine trying to send will be pushed into the value buffer queue of the channel. The receiving goroutine R continues running. For this scenario, the channel receive operation is called a non-blocking operation.</li>
</ol>
<ul>
<li>The goroutine R will receive a value from the value buffer queue.</li>
</ul>
<p><img src="../../images/channel%20golang/receive1.png" alt="receive value from buffer, sending goroutine queue is empty"></p>
<ul>
<li>The goroutine R will recceive a value from the value buffer queue. Sending goroutine is not empty. Goroutine S send value to buffer and enter running state again.</li>
</ul>
<p><img src="../../images/channel%20golang/receive2.png" alt="receive value from buffer, sending goroutine is not emtpy"></p>
<p><strong>-&gt; The receiving goroutine R continues running. The channel receive operation is called a non-blocking operation</strong></p>
<ol start="2">
<li>Check buffer, the value buffer of the channel is empty. If the sending goroutine queue of the channel is not empty, in which case the channel must be an unbuffered channel, the receiving goroutine R will unshift value from a send goroutine. The just unshifted sending goroutine will get unblocked and resumed to running state again.</li>
</ol>
<p><img src="../../images/channel%20golang/receive3.png" alt="receive value from buffer, sending goroutine is not emtpy"></p>
<p><strong>-&gt; The receiving goroutine R continues running. The channel receive operation is called a non-blocking operation</strong></p>
<ol start="3">
<li>If value buffer queue and the sending goroutine queue of the channel are both emtpy, the goroutine R will be pushed into the receiving goroutine queue of the channel and enter (and stay in) blocking state. It may be resumed to running state when another goroutine sends a value to the channel later.</li>
</ol>
<p><img src="../../images/channel%20golang/receive4.png" alt="receive value from buffer, sending goroutine is not emtpy"></p>
<p><strong>-&gt; The receiving goroutine R enter blocking state. The channel receive operation is called a blocking operation</strong></p>
<h3 id="channel-operation-try-to-send">Channel operation: try to send</h3>
<p>When a goroutine S tries to send a value to a not-closed non-nil channel, the goroutine S will acquire the lock associated with the channel firstly, then do the following steps until one step condition is satisfied.</p>
<ol>
<li>Check receiving goroutine queue. If the receiving goroutine queue of the channel is not empty, in which case the value buffer queue of the channel must be empty, the sending goroutine S will unshift a receiving goroutine from the receiving goroutine queue of the  channel and send the value to the just unshifted receiving goroutine. The just unshifted receiving goroutine will get unblocked and resumed to running state again.</li>
</ol>
<p><img src="../../images/channel%20golang/send1.png" alt="send value"></p>
<p><strong>-&gt; The sending goroutine S continues running. The channel send operation is called a non-blocking operation</strong></p>
<ol start="2">
<li>Check receiving goroutine queue (empty), check buffer queue ( not full ), in which case the sending goroutine queue must be also empty, the value the sending goroutine S trying to send will be pushed into the value buffer queue.</li>
</ol>
<p><img src="../../images/channel%20golang/send2.png" alt="send value"></p>
<p><strong>-&gt; The sending goroutine S continues running. The channel send operation is called a non-blocking operation</strong></p>
<ol start="3">
<li>Check receiving goroutine queue (empty), check buffer queue ( full ), the sending goroutine S will be pushed into the sending goroutine queue of the channel and enter (and stay in) blocking state. It may be resumed to running state when another goroutine receives a value from the channel later.</li>
</ol>
<p><img src="../../images/channel%20golang/send3.png" alt="send value"></p>
<p><strong>-&gt; The sending goroutine S enter blocking. The channel send operation is called a blocking operation</strong></p>
<p>Once a non-nil channel is closed, sending a value to the channel will produce a runtime panic in the current goroutine. Note sending data to a closed channel is viewed as a non-blocking operation.</p>
<h3 id="channel-operation-try-to-close">Channel operation: try to close</h3>
<p>When a goroutine tries to close a not-closed non-nil channel, once the goroutine has acquired the lock of the channel, both of the following two steps will be performed by the following order.</p>
<ol>
<li>If the receiving goroutine queue of the channel is not empty, in which case the value buffer of the channel must be empty, all the goroutines in the receiving goroutine queue of the channel will be unshifted one by one, each of themm will receive a zero value of the elemenet type of the channel and be resumed to running state.</li>
</ol>
<p><img src="../../images/channel%20golang/close1.png" alt="send value"></p>
<ol start="2">
<li>If the sending goroutine queue of the channel is not empty, all the goroutines in the sending goroutine queue of the channel will be unshifted one by one and each of them will produce a panic for sending on a closed channel. This is the reason why we should avoid concurrent send and close operations on the same channel.</li>
</ol>
<p>After a channel is closed, the values which have been already pushed into the value buffer of the channel are still there.</p>
<p><strong>After a non-nil channel is closed, channel receive operations os the channel will never block</strong></p>
<h3 id="some-facts-about-the-internal-queues-of-a-channel">Some facts about the internal queues of a channel</h3>
<ul>
<li>If the channel is closed, both its sending and receiving goroutine queue must be empty, but its value buffer may not be empty.</li>
<li>At any time, if the value buffer is not empty, then its receiving goroutine queue must be empty.</li>
<li>At any time, if the value buffer is not full, then its sending goroutine queue must be empty.</li>
<li>If the channel is buffered, then at time, at least one of the channel&rsquo;s goroutine queues must be empty (sending, receiving or both).</li>
<li>If the channel is unbuffered, most of the time one of its sending goroutine queue and the receiving goroutine queue must be empty, with one exception. The exception is that a goroutine may be pushed into both of the two queues when execution a select control flow code block.</li>
</ul>
<p><strong>References</strong> <a href="https://go101.org/article/channel.html">Channel Use Case go101</a></p>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>Hai Đứa Trẻ</title>
      <link>https://idev-blog.web.app/posts/poem-hai-%C4%91%E1%BB%A9a-tr%E1%BA%BB/</link>
      <pubDate>Thu, 13 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://idev-blog.web.app/posts/poem-hai-%C4%91%E1%BB%A9a-tr%E1%BA%BB/</guid>
      <description><![CDATA[<p>Hai đứa trẻ lớn lên nơi rừng núi</p>
<p>Xung quanh nhà nào là cỏ, là cây</p>
<p>Hai đứa trẻ là chị là em, và là bạn</p>
<p>Bạn bè xung quanh, hiếm lắm ấy mà.</p>
<p> </p>
<p>Hai đứa trẻ nhiều đêm khó ngủ</p>
<p>Bố mẹ đi rẫy mãi chưa về</p>
<p>Hai đứa trẻ ngồi bên ngọn nến sáng</p>
<p>Chỉ bóng trên tường, gọi mẹ xưng con.</p>
<p> </p>
<p>Hai đứa trẻ rời xa nơi nương náu</p>
<p>Bố mẹ lo chuyện học hành mai sau</p>
<p>Hai đứa trẻ là chị là em, không là bạn</p>
<p>Nhảy dây, bị mắt, thú vị hơn nhiều.</p>
<p> </p>
<p>Hai đứa trẻ mai này rồi cũng lớn</p>
<p>Đứa rời xóm làng, đứa tìm thủ đô</p>
<p>Hai đứa trẻ hiếm nào khi hỏi chuyện</p>
<p>Chuyện học hành, chuyện tương lai, chuyện mai sau</p>
<p>Hai đứa trẻ, hai đứa trẻ ấy không còn&hellip;</p>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>Mưa</title>
      <link>https://idev-blog.web.app/posts/poem-m%C6%B0a/</link>
      <pubDate>Fri, 11 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://idev-blog.web.app/posts/poem-m%C6%B0a/</guid>
      <description><![CDATA[<p>Mưa,</p>
<p>Mưa trên mái hiên nhà</p>
<p>Đến tận cánh đồng xa</p>
<p>Mưa,</p>
<p>Mưa hoài, mưa xối xả</p>
<p>Kìa ai đang thả thuyền lá</p>
<p>Kí ức trôi</p>
<p>Trôi mãi tận miền xa.</p>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>Lửa Hồng</title>
      <link>https://idev-blog.web.app/posts/poem-l%E1%BB%ADa-h%E1%BB%93ng/</link>
      <pubDate>Sat, 20 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://idev-blog.web.app/posts/poem-l%E1%BB%ADa-h%E1%BB%93ng/</guid>
      <description><![CDATA[<p>Có một đốm than nhỏ</p>
<p>Thắp lên ngọn lửa hồng</p>
<p>Dành trọn nhiệt huyết nồng</p>
<p>Tháp sáng ước mơ to.</p>
]]></description>
      
    </item>
    
    
    
    <item>
      <title></title>
      <link>https://idev-blog.web.app/posts/how-to-create-awesome-http-client-in-golang/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://idev-blog.web.app/posts/how-to-create-awesome-http-client-in-golang/</guid>
      <description><![CDATA[]]></description>
      
    </item>
    
    
    
    <item>
      <title></title>
      <link>https://idev-blog.web.app/posts/write-supper-log-in-golang/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://idev-blog.web.app/posts/write-supper-log-in-golang/</guid>
      <description><![CDATA[]]></description>
      
    </item>
    
    
    
    
    
    
  </channel>
</rss>
