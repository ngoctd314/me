<?xml version="1.0" encoding="utf-8" standalone="yes"?><?xml-stylesheet href="/feed_style.xsl" type="text/xsl"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="https://www.rssboard.org/media-rss">
  <channel>
    <title>NgocTD&#39;s Dev Log</title>
    <link>https://idev-blog.web.app/</link>
    <description>Recent content on NgocTD&#39;s Dev Log</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Tran Duc Ngoc</copyright>
    <lastBuildDate>Sat, 05 Nov 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://idev-blog.web.app/index.xml" rel="self" type="application/rss+xml" /><icon>https://idev-blog.web.app/logo.png</icon>
    
    
    <item>
      <title>Generator and Future Pattern</title>
      <link>https://idev-blog.web.app/posts/concurrency-pattern-generator-future/</link>
      <pubDate>Sat, 05 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://idev-blog.web.app/posts/concurrency-pattern-generator-future/</guid>
      <description><![CDATA[<p>Generator Pattern allows the consumer of the data produced by the generator to run in parallel when the generator function is busy computing the next value.</p>
<p>A Future indicates any data that is needed in future but its computation can be started in parallel so that it can be fetched from the background when needed.</p>
<h2 id="generator">Generator</h2>
<p>Generator Pattern is used to generator a sequence of values which is used to produce some output. This allows the consumer of the data produced by the generator to run in parallel when the generator function is busy computing the text value.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">func</span> <span style="color:#50fa7b">fib</span>(n <span style="color:#8be9fd">int</span>) <span style="color:#8be9fd;font-style:italic">chan</span> <span style="color:#8be9fd">int</span> {
</span></span><span style="display:flex;"><span>	c <span style="color:#ff79c6">:=</span> <span style="color:#8be9fd;font-style:italic">make</span>(<span style="color:#8be9fd;font-style:italic">chan</span> <span style="color:#8be9fd">int</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff79c6">go</span> <span style="color:#8be9fd;font-style:italic">func</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#6272a4">// next state is depend on previous state
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>		<span style="color:#ff79c6">for</span> i, j <span style="color:#ff79c6">:=</span> <span style="color:#bd93f9">0</span>, <span style="color:#bd93f9">1</span>; i &lt; n; i, j = i<span style="color:#ff79c6">+</span>j, i {
</span></span><span style="display:flex;"><span>			c <span style="color:#ff79c6">&lt;-</span> i
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>		<span style="color:#8be9fd;font-style:italic">close</span>(c)
</span></span><span style="display:flex;"><span>	}()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff79c6">return</span> c
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">func</span> <span style="color:#50fa7b">consumer</span>(c <span style="color:#8be9fd;font-style:italic">chan</span> <span style="color:#8be9fd">int</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">for</span> v <span style="color:#ff79c6">:=</span> <span style="color:#ff79c6">range</span> c {
</span></span><span style="display:flex;"><span>        fmt.<span style="color:#50fa7b">Println</span>(v)
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The generator and the consumer can work concurrently (maybe in parallel) as the logic involved in both are different.</p>
<h2 id="future">Future</h2>
<p>A Future indicates any data that is needed in future but its computation can be started in parallel so that it can be fetched from the background when needed. Mostly, futures are used to send asynchronous http request.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">type</span> data <span style="color:#8be9fd;font-style:italic">struct</span> {
</span></span><span style="display:flex;"><span>    Body []<span style="color:#8be9fd">byte</span>
</span></span><span style="display:flex;"><span>    Error <span style="color:#8be9fd">error</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">func</span> <span style="color:#50fa7b">futureDate</span>(url <span style="color:#8be9fd">string</span>) <span style="color:#ff79c6">&lt;-</span> <span style="color:#8be9fd;font-style:italic">chan</span> data {
</span></span><span style="display:flex;"><span>    c <span style="color:#ff79c6">:=</span> <span style="color:#8be9fd;font-style:italic">make</span>(<span style="color:#8be9fd;font-style:italic">chan</span> data, <span style="color:#bd93f9">1</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">go</span> <span style="color:#8be9fd;font-style:italic">func</span>(){
</span></span><span style="display:flex;"><span>        resp, err <span style="color:#ff79c6">:=</span> http.<span style="color:#50fa7b">Get</span>(url)
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">if</span> err <span style="color:#ff79c6">!=</span> <span style="color:#ff79c6">nil</span> {
</span></span><span style="display:flex;"><span>            c <span style="color:#ff79c6">&lt;-</span> data{
</span></span><span style="display:flex;"><span>            	Body:  <span style="color:#ff79c6">nil</span>,
</span></span><span style="display:flex;"><span>            	Error: err,
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>            <span style="color:#ff79c6">return</span>
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        body, err <span style="color:#ff79c6">:=</span> ioutil.<span style="color:#50fa7b">ReadAll</span>(resp.Body)
</span></span><span style="display:flex;"><span>        resp.Body.<span style="color:#50fa7b">Close</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">if</span> err <span style="color:#ff79c6">!=</span> <span style="color:#ff79c6">nil</span> {
</span></span><span style="display:flex;"><span>            c <span style="color:#ff79c6">&lt;-</span> data{
</span></span><span style="display:flex;"><span>            	Body:  <span style="color:#ff79c6">nil</span>,
</span></span><span style="display:flex;"><span>            	Error: err,
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>            <span style="color:#ff79c6">return</span>
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        c <span style="color:#ff79c6">&lt;-</span> data{
</span></span><span style="display:flex;"><span>        	Body:  body,
</span></span><span style="display:flex;"><span>        	Error: err,
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">return</span> <span style="color:#ff79c6">nil</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The actual http request is done asynchronously in a goroutine. The main function can continue doing other things. When the result is needed, we read the result from the channel. If the request isn&rsquo;t finished yet, the channel will block until the result is ready.</p>
<h2 id="different-between-generator-and-future">Different Between Generator and Future</h2>
<p>In generator pattern, we generate next state base on previous state (maybe not), but i purpose is compute many things in background. In future pattern, we use goroutine to execute an &ldquo;heavy job&rdquo; (only one job).</p>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>Fan out, Fan in</title>
      <link>https://idev-blog.web.app/posts/concurrency-pattern-fan-in-fan-out/</link>
      <pubDate>Thu, 03 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://idev-blog.web.app/posts/concurrency-pattern-fan-in-fan-out/</guid>
      <description><![CDATA[<p>You&rsquo;ve got a pipeline set up. Data is flowing through your system beautifully. Sometimes, stages in your pipeline can be computationally expensive. When this happens, upstream stages in your pipeline can become blocked while waiting for your expensive stages to complete.</p>
<p>One of the interesting properties of pipelines is the ability they give you to operate on the stream of data using a combination of separate, often <strong>reordered</strong> stages. Maybe that would help improve the performance of the pipeline. In fact, it turns out it can, and this pattern has a name: fan-out, fan-in.</p>
<h2 id="a-generator-function">A generator function</h2>
<p>Generator (aka Iterator) Pattern is used to generate a sequence of values which is used to produce some output. This allows the consumer of the data producer by the generator to run in parallel when the generator function is busy computing the next value.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">func</span> <span style="color:#50fa7b">generator</span>(data <span style="color:#8be9fd">string</span>) <span style="color:#ff79c6">&lt;-</span> <span style="color:#8be9fd;font-style:italic">chan</span> <span style="color:#8be9fd">string</span> {
</span></span><span style="display:flex;"><span>    channel <span style="color:#ff79c6">:=</span> <span style="color:#8be9fd;font-style:italic">make</span>(<span style="color:#8be9fd;font-style:italic">chan</span> <span style="color:#8be9fd">string</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">go</span> <span style="color:#8be9fd;font-style:italic">func</span>(){
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">for</span> {
</span></span><span style="display:flex;"><span>            channel <span style="color:#ff79c6">&lt;-</span> data
</span></span><span style="display:flex;"><span>            time.<span style="color:#50fa7b">Sleep</span>(time.<span style="color:#50fa7b">Duration</span>(<span style="color:#bd93f9">100</span><span style="color:#ff79c6">*</span>time.Millisecond))
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }()
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">return</span> channel
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="fan-out">Fan out</h2>
<p>Fan-out is a term to describe the process of starting multiple goroutines to handle input from the pipeline.</p>
<p>You might consider fanning out one of your stages if both of the following apply:</p>
<ul>
<li>It doesn&rsquo;t rely on values that the state had calculated before.</li>
<li>It takes a long time to run. (system call, a heavy cpu job, &hellip;)</li>
</ul>
<p><img src="../../images/fanin-fanout/fan-out.png" alt="fan-out"></p>
<p>The property of order-independence is important because you have no guarantee in what order concurrent copies of your stage will run, nor in what order they will return.</p>
<h2 id="fan-in">Fan in</h2>
<p>Fan-in is a term to describe the process of combining multiple results into one channel.</p>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>Hai Đứa Trẻ</title>
      <link>https://idev-blog.web.app/posts/poem-hai-%C4%91%E1%BB%A9a-tr%E1%BA%BB/</link>
      <pubDate>Thu, 13 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://idev-blog.web.app/posts/poem-hai-%C4%91%E1%BB%A9a-tr%E1%BA%BB/</guid>
      <description><![CDATA[<p>Hai đứa trẻ lớn lên nơi rừng núi</p>
<p>Xung quanh nhà nào là cỏ, là cây</p>
<p>Hai đứa trẻ là chị là em, và là bạn</p>
<p>Bạn bè xung quanh, hiếm lắm ấy mà.</p>
<p> </p>
<p>Hai đứa trẻ nhiều đêm khó ngủ</p>
<p>Bố mẹ đi rẫy mãi chưa về</p>
<p>Hai đứa trẻ ngồi bên ngọn nến sáng</p>
<p>Chỉ bóng trên tường, gọi mẹ xưng con.</p>
<p> </p>
<p>Hai đứa trẻ rời xa nơi nương náu</p>
<p>Bố mẹ lo chuyện học hành mai sau</p>
<p>Hai đứa trẻ là chị là em, không là bạn</p>
<p>Nhảy dây, bị mắt, thú vị hơn nhiều.</p>
<p> </p>
<p>Hai đứa trẻ mai này rồi cũng lớn</p>
<p>Đứa rời xóm làng, đứa tìm thủ đô</p>
<p>Hai đứa trẻ hiếm nào khi hỏi chuyện</p>
<p>Chuyện học hành, chuyện tương lai, chuyện mai sau</p>
<p>Hai đứa trẻ, hai đứa trẻ ấy không còn&hellip;</p>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>Mưa</title>
      <link>https://idev-blog.web.app/posts/poem-m%C6%B0a/</link>
      <pubDate>Fri, 11 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://idev-blog.web.app/posts/poem-m%C6%B0a/</guid>
      <description><![CDATA[<p>Mưa,</p>
<p>Mưa trên mái hiên nhà</p>
<p>Đến tận cánh đồng xa</p>
<p>Mưa,</p>
<p>Mưa hoài, mưa xối xả</p>
<p>Kìa ai đang thả thuyền lá</p>
<p>Kí ức trôi</p>
<p>Trôi mãi tận miền xa.</p>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>Lửa Hồng</title>
      <link>https://idev-blog.web.app/posts/poem-l%E1%BB%ADa-h%E1%BB%93ng/</link>
      <pubDate>Wed, 20 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://idev-blog.web.app/posts/poem-l%E1%BB%ADa-h%E1%BB%93ng/</guid>
      <description><![CDATA[<p>Có một đốm than nhỏ</p>
<p>Thắp lên ngọn lửa hồng</p>
<p>Dành trọn nhiệt huyết nồng</p>
<p>Tháp sáng ước mơ to.</p>
]]></description>
      
    </item>
    
    
    
    <item>
      <title></title>
      <link>https://idev-blog.web.app/posts/tech-talk-concurrent-is-not-parallelism/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://idev-blog.web.app/posts/tech-talk-concurrent-is-not-parallelism/</guid>
      <description><![CDATA[]]></description>
      
    </item>
    
    
    
    <item>
      <title></title>
      <link>https://idev-blog.web.app/posts/tech-talk-reactive-programming-by-vertx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://idev-blog.web.app/posts/tech-talk-reactive-programming-by-vertx/</guid>
      <description><![CDATA[]]></description>
      
    </item>
    
    
    
    
    
    
  </channel>
</rss>
